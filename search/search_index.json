{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The iCal4j project is a collection of Open Source Java libraries for creating semantically-rich calendar and scheduling data. iCal4j is based on the iCalendar and vCard specifications, with each library focused on a specific subset of interoperability functionality.</p> <p></p>"},{"location":"#what-is-icalendar","title":"What is iCalendar?","text":"<p>The iCalendar standard was originally created from a collaboration of leading groupware developers, as a way for their software to interoperate.</p> <p>The core iCal4j library provides an implementation of the iCalendar specifications that are designed to facilitate interoperability between calendaring and scheduling software systems.</p> <p>iCalendar provides a common data format used to store scheduling information such as events, appointments, to-do lists, etc. Most calendaring tools include some level of support for the iCalendar standard.</p>"},{"location":"#active-projects","title":"Active Projects","text":"<p>The following table provides an overview of the currently active projects in iCal4j.</p> Name Description References ical4j Model and parsing support for iCalendar standards RFC5545, RFC5546, RFC6868, RFC7953, RFC7986, RFC7529, RFC9073, RFC9074, RFC9253 ical4j-zoneinfo-outlook Alternate timezone definitions to improve support for MS Outlook - ical4j-vcard Model and parsing support for vCard standards RFC6350, RFC6473, RFC6474, RFC6868, RFC6869 ical4j-extensions Model extensions for non-standard data objects - ical4j-connector Connectivity to persistent store implementations (e.g. CalDAV) RFC4791, RFC6352 ical4j-integration Delivery of data objects via common transport channels (e.g Email) RFC6047 ical4j-serializer Serialization of data objects to structured data formats (e.g xCal, jCal, JSCalendar, etc.) RFC6321, RFC6351, RFC7095, RFC7265, RFC8984 ical4j-command Command framework and CLI - ical4j-streams Asynchronous stream processing - ical4j-graph Linked object traversal - ical4j-template Templating support for data presentation - tzurl Generation and hosting of timezone data in iCalendar format -"},{"location":"#further-links","title":"Further Links","text":"<ul> <li> <p>For a concise description of the goals and directions of iCal4j please  take a look at the open issues.</p> </li> <li> <p>In this guide You will find examples of how to use iCal4j, as well as throughout the API documentation.</p> </li> <li> <p>Detailed descriptions of changes included in each release may be found  in the CHANGELOG.</p> </li> <li> <p>iCal4j was created with the help of Open Source software.</p> </li> </ul>"},{"location":"android/","title":"Android Support","text":"<p>You can use iCal4j directly in your Android applications.  Instructions for adding third-party libraries in Eclipse available here.</p> <p>NOTE: Recent changes to example gradle build and proguard configs provided in this issue</p>"},{"location":"android/#gradleandroidstudio","title":"Gradle/AndroidStudio","text":"<p>You can use iCal4j with your AndroidStudio/gradle buildfile.</p> <p>This is a working build.gradle example taken from k3b/calef</p> <pre><code>apply plugin: 'com.android.application'\n\nandroid {\n    compileSdk 34\n    packagingOptions {\n        jniLibs {\n            excludes += ['META-INF/groovy/**', 'zoneinfo-global/**']\n        }\n        resources {\n            excludes += ['META-INF/LICENSE.txt', 'META-INF/NOTICE.txt', '**/package-info.java', 'META-INF/groovy-release-info.properties', 'META-INF/INDEX.LIST', 'META-INF/groovy/**', 'zoneinfo-global/**', 'org/apache/commons/codec/language/bm/*.txt']\n        }\n    }\n\n\n    defaultConfig {\n        applicationId \"de.k3b.android.calef\"\n        // Android 4.0 (api14)\n        minSdkVersion 14\n        //noinspection EditedTargetSdkVersion\n        targetSdkVersion 34\n\n        versionCode 6\n        versionName \"1.1.2.1\"\n\n        // 1.1.2.1 (6) maintanance Updated libs and compileSdk\n        // 1.1.2 (5) Fixed Initialisation Error\n        // 1.1.1 (4) reordered Settings; Fixed Initialisation Error\n        // 1.1.0 (3) added optional message prefix (\"I have added this to my calendar\")\n        // 1.0.1 (2) fixed translation issues\n        // 1.0.0 (1) initial Release translated in en and de\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            resValue \"string\", \"debug_title\", \"\"\n\n        }\n        debug {\n            minifyEnabled false\n            applicationIdSuffix \".debug\"\n            versionNameSuffix \"-DEBUG\"\n            resValue \"string\", \"debug_title\", \"DEBUG-\" + getDate()\n        }\n    }\n    compileOptions {\n        // java 8 needed for android-4.x\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    namespace 'de.k3b.android.calef'\n    lint {\n        abortOnError false\n        // checkReleaseBuilds false\n\n        // http://stackoverflow.com/questions/31350350/generating-signed-apk-error7-missingtranslation-in-build-generated-res-gen\n        // MissingTranslation : not all crowdwin translations are complete so ignore them\n        // ValidFragment : local (dialog-)fragment class for customized directory picker is fragile but on rotation code makes sure that dialog is closed.\n        // disable 'MissingTranslation','ValidFragment', 'ContentDescription', 'AndroidLintPluralsCandidate', 'AndroidLintRtlHardcoded'\n        // disable 'MissingTranslation','ValidFragment', 'ContentDescription', 'ExpiredTargetSdkVersion'\n        disable 'MissingTranslation', 'ContentDescription', 'ExpiredTargetSdkVersion'\n    }\n}\n\ndependencies {\n    implementation 'androidx.annotation:annotation:1.7.0'\n\n    // ical4j see https://ical4j.github.io/ical4j-user-guide/examples/\n//    implementation 'org.mnode.ical4j:ical4j:3.1.0' // requires api-26 + java11\n//    implementation 'org.mnode.ical4j:ical4j:3.0.29' // requires api-26 + java11\n//    implementation 'org.mnode.ical4j:ical4j:1.0.8' // most recent version 1.x: compiles with api-7 + java6\n\n    //noinspection GradleDependency\n    // most recent version 2.x: compiles with api-14 + java8\n    implementation 'org.mnode.ical4j:ical4j:2.2.7'\n\n    // required by ical4j R8-minify: must be present in order to be removed :-/\n    implementation 'javax.cache:cache-api:1.1.1'\n\n    implementation 'backport-util-concurrent:backport-util-concurrent:3.1'\n\n    // do not automatically update to 20041127.091804 which is much older that 1.16.0\n    //noinspection GradleDependency\n    implementation 'commons-codec:commons-codec:1.16.0'\n\n    // do not automatically update to 20030203.000129 which is much older that 2.6\n    //noinspection GradleDependency\n    implementation 'commons-lang:commons-lang:2.6'\n\n    testImplementation 'junit:junit:4.13.2'\n\n    implementation 'org.slf4j:slf4j-api:2.0.9'\n    testImplementation 'org.slf4j:slf4j-simple:2.0.9'\n    // causes warning in unittests: \"SLF4J: Class path contains multiple SLF4J bindings.\"\n    implementation 'uk.uuid.slf4j:slf4j-android:2.0.9-0'\n    // uses app/src/main/resources/uk/uuid/slf4j/android/config.properties\n}\n\n\nstatic def getDate() {\n    def date = new Date()\n    def formattedDate = date.format('yyyyMMdd-HH:mm')\n    return formattedDate\n}\n</code></pre>"},{"location":"android/#eclipse","title":"Eclipse","text":"<p>The Android eclipse plugin is quite useful for creating Android projects, just remember that to make resources visible to the iCal4j library they should be added to the 'src' directory rather than 'res'. For example;</p> <pre><code>&lt;project_root&gt;\n- src\n+- ical4j.properties\n+- &lt;your Android source&gt;\n- res\n+- &lt;your Android app resources&gt;\n- lib\n+- ical4j.jar\n+- commons-logging.jar\n+- commons-lang.jar\n+- commons-codec.jar\n+- backport-util-concurrent.jar\n</code></pre>"},{"location":"android/#maven","title":"Maven","text":"<p>The Android maven plugin allows you to configure your dependencies, such as iCal4j in the usual way. The important parts to your pom.xml are as follows:</p> <pre><code>&lt;project ..&gt;\n        ...\n    &lt;packaging&gt;apk&lt;/packaging&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;net.fortuna.ical4j&lt;/groupId&gt;\n            &lt;artifactId&gt;ical4j&lt;/artifactId&gt;\n            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.android&lt;/groupId&gt;\n            &lt;artifactId&gt;android&lt;/artifactId&gt;\n            &lt;version&gt;1.6_r2&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;build&gt;\n        &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;\n        &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;\n\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;com.jayway.maven.plugins.android.generation2&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-android-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.6.0&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;sdk&gt;\n                        &lt;platform&gt;4&lt;/platform&gt;\n                    &lt;/sdk&gt;\n                    &lt;emulator&gt;\n                        &lt;avd&gt;SE_X10_Mini&lt;/avd&gt;\n                    &lt;/emulator&gt;\n                    &lt;deleteConflictingFiles&gt;true&lt;/deleteConflictingFiles&gt;\n                    &lt;undeployBeforeDeploy&gt;true&lt;/undeployBeforeDeploy&gt;\n                &lt;/configuration&gt;\n                &lt;extensions&gt;true&lt;/extensions&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;5&lt;/source&gt;\n                    &lt;target&gt;5&lt;/target&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <p>A simple Android test project has been created to demonstrate iCal4j usage. You can browse the contents of this project here.</p>"},{"location":"android/#caveats","title":"Caveats","text":"<p>Note that there are a couple of library dependencies that are required by iCal4j that are also included in Android (but not exposed in the API docs). These are:</p> <ul> <li>commons-logging</li> <li>commons-codec</li> <li>backport-util-current (not required for Java 5+)</li> </ul> <p>As a result I believe (untested) that you won't need to include these dependencies in your APK. The easiest way to exclude them using maven is to change the scope to provided for these dependences. ie:</p> <pre><code>&lt;project ..&gt;\n        ...\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;net.fortuna.ical4j&lt;/groupId&gt;\n            &lt;artifactId&gt;ical4j&lt;/artifactId&gt;\n            &lt;version&gt;1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-logging&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;\n            &lt;version&gt;1.1.1&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-codec&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;\n            &lt;version&gt;1.2&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;backport-util-concurrent&lt;/groupId&gt;\n            &lt;artifactId&gt;backport-util-concurrent&lt;/artifactId&gt;\n            &lt;version&gt;3.1&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.google.android&lt;/groupId&gt;\n            &lt;artifactId&gt;android&lt;/artifactId&gt;\n            &lt;version&gt;2.3.3&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"android/#reducing-android-footprint-by-using-proguard","title":"Reducing Android-footprint by using proguard","text":"<p>iCal4j has several groovy classes that are not supported by android, and fortunately you can live without them under android.</p> <p>You can remove unused classes from your android app using proguard.</p> <p>Here is a working example from k3b/calef</p> <pre><code># Add project specific ProGuard rules here.\n# You can control the set of applied configuration files using the\n# proguardFiles setting in build.gradle.\n#\n# For more details, see\n#   http://developer.android.com/guide/developing/tools/proguard.html\n\n# If your project uses WebView with JS, uncomment the following\n# and specify the fully qualified class name to the JavaScript interface\n# class:\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n#   public *;\n#}\n\n# Uncomment this to preserve the line number information for\n# debugging stack traces.\n#-keepattributes SourceFile,LineNumberTable\n\n# If you keep the line number information, uncomment this to\n# hide the original source file name.\n#-renamesourcefileattribute SourceFile\n\n#\n## ical4j also contains groovy code which is not used in android\n-dontwarn groovy.**\n-dontwarn org.codehaus.groovy.**\n-dontwarn org.apache.commons.logging.**\n\n-dontnote com.google.vending.**\n-dontnote com.android.vending.licensing.**\n\n## log4j: remove net.fortuna.ical4j.util.JCacheTimeZoneCache.** that requires javax.cache.**\n## use MapTimeZoneCache instead\n-assumenosideeffects class net.fortuna.ical4j.util.JCacheTimeZoneCache\n-assumenosideeffects class javax.cache.Cache\n-assumenosideeffects class javax.cache.CacheManager\n-assumenosideeffects class javax.cache.Caching\n-assumenosideeffects class javax.cache.configuration.Configuration\n-assumenosideeffects class javax.cache.configuration.MutableConfiguration\n-assumenosideeffects class javax.cache.spi.CachingProvider\n-keep class net.fortuna.ical4j.util.MapTimeZoneCache\n\n###################\n# Get rid of #can't find referenced method in library class java.lang.Object# warnings for clone() and finalize()\n# Warning: net.fortuna.ical4j.model.CalendarFactory: can't find referenced method 'void finalize()' in library class java.lang.Object\n# Warning: net.fortuna.ical4j.model.ContentBuilder: can't find referenced method 'java.lang.Object clone()' in library class java.lang.Object\n# for details see http://stackoverflow.com/questions/23883028/how-to-fix-proguard-warning-cant-find-referenced-method-for-existing-methods\n-dontwarn net.fortuna.ical4j.model.**\n\n###############\n# I use proguard only to remove unused stuff and to keep the app small.\n# I donot want to obfuscate (rename packages, classes, methods, ...) since this is open source\n-keepnames class ** { *; }\n-keepnames interface ** { *; }\n-keepnames enum ** { *; }\n</code></pre> <p>Statistics:</p> <ul> <li>without proguard obfuscation: 932 classes; apk 911kb.</li> <li>with proguard obfuscation: 365 classes;apk 505kb</li> </ul> <p>Note: If you want to use proguard with gradle your build.gradle also needs this:</p> <pre><code>buildTypes {\n    release {\n        minifyEnabled true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n    }\n    debug {\n        minifyEnabled true\n        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'\n    }\n}\n</code></pre> <p>Further instructions on reducing the size of your APK using Proguard are available here.</p>"},{"location":"compatibility/","title":"Compatibility with other CUAs","text":"<p>To increase interoperability with other CUAs a number of Compatibility Hints are provided in iCal4j. You can enable these hints in one of three (3) ways:</p>"},{"location":"compatibility/#enabling-compatibility-hints-programmatically","title":"Enabling Compatibility Hints programmatically","text":"<p>Compatibility Hints can be enabled and disabled by calling the static method CompatibilityHints.setHintEnabled(). For example:</p> <pre><code>CompatibilityHints.setHintEnabled(KEY_RELAXED_UNFOLDING, true);\n</code></pre>"},{"location":"compatibility/#specifying-compatibility-hints-in-a-properties-file","title":"Specifying Compatibility Hints in a properties file","text":"<ol> <li> <p>Create a file called <code>ical4j.properties</code> and include it in the root of your classpath (alternatively you can copy a sample file from CVS).</p> </li> <li> <p>Add appropriate lines for enabling hints. So for example, to enable relaxed unfolding add the following:</p> </li> </ol> <pre><code>ical4j.unfolding.relaxed=true\n</code></pre> <p>The complete list of Compatibility Hint properties is as follows:</p> <pre><code>ical4j.unfolding.relaxed={true|false}\n\nical4j.parsing.relaxed={true|false}\n\nical4j.validation.relaxed={true|false}\n\nical4j.compatibility.outlook={true|false}\n\nical4j.compatibility.notes={true|false}\n</code></pre>"},{"location":"compatibility/#specifying-compatibility-hints-as-system-properties","title":"Specifying Compatibility Hints as System properties","text":"<p>You may also specify the same Compatibility Hints above as System properties. For example:</p> <pre><code>java -Dical4j.unfolding.relaxed=true &lt;some_program&gt;\n</code></pre>"},{"location":"compatibility/#related","title":"Related","text":"<p>See Configuring iCal4j for a full list of configuration options.</p>"},{"location":"components/","title":"iCalendar Components","text":"<p>Components in iCalendar are used to encapsulate a group of properties (and subcomponents) that define a specific type of content. For example, events, to-dos and journals are all defined as components of an iCalendar object.</p>"},{"location":"components/#calendar-components","title":"Calendar Components","text":"<p>Some components may be added directly to an iCalendar object, whereas others are used as subcomponents to these top-level components. In iCal4j top-level components are known as Calendar Components and extend the <code>CalendarComponent</code> abstract class.</p> Calendar Components <code>VEVENT</code> <code>VTODO</code> <code>VJOURNAL</code> <code>VFREEBUSY</code> <code>VTIMEZONE</code> <code>VAVAILABILITY</code>"},{"location":"components/#subcomponents","title":"Subcomponents","text":"<p>Subcomponents are nested components, and can be multiple levels deep. For example, an event may have a nested alarm component, which in turn has a nested location component for a proximity trigger.</p> Component Subcomponents <code>VEVENT</code> <code>VALARM</code>, <code>PARTICIPANT</code>, <code>VLOCATION</code>, <code>VRESOURCE</code> <code>VTODO</code> <code>VALARM</code>, <code>PARTICIPANT</code>, <code>VLOCATION</code>, <code>VRESOURCE</code> <code>VJOURNAL</code> <code>PARTICIPANT</code>, <code>VLOCATION</code>, <code>VRESOURCE</code> <code>VFREEBUSY</code> <code>PARTICIPANT</code>, <code>VLOCATION</code>, <code>VRESOURCE</code> <code>VTIMEZONE</code> <code>STANDARD</code>, <code>DAYLIGHT</code> <code>VAVAILABILITY</code> <code>AVAILABLE</code> <code>VALARM</code> <code>VLOCATION</code> <code>PARTICIPANT</code> <code>VLOCATION</code>, <code>VRESOURCE</code>"},{"location":"components/#property-accessors","title":"Property Accessors","text":"<p>Each component may implement one or more property accessors, which provide convenience methods for retrieval of different property types.</p> <pre><code>Optional&lt;DtStart&gt; start = event.getDtStart();\n\nList&lt;Categories&gt; categories = todo.getCategories();\n</code></pre> Property Accessor Supported Properties ChangeManagementPropertyAccessor <code>CREATED</code>, <code>DTSTAMP</code>, <code>LAST-MODIFIED</code>, <code>SEQUENCE</code> DateTimePropertyAccessor <code>COMPLETED</code>, <code>DTEND</code>, <code>DUE</code>, <code>DTSTART</code>, <code>DURATION</code>, <code>FREEBUSY</code>, <code>TRANSP</code> DescriptivePropertyAccessor <code>ATTACH</code>, <code>CATEGORIES</code>, <code>CLASS</code>, <code>COMMENT</code>, <code>DESCRIPTION</code>, <code>GEO</code>, <code>LOCATION</code>, <code>PERCENT-COMPLETE</code>, <code>PRIORITY</code>, <code>STATUS</code>, <code>SUMMARY</code> RelationshipPropertyAccessor <code>ATTENDEE</code>, <code>CONTACT</code>, <code>ORGANIZER</code>, <code>RECURRENCE-ID</code>, <code>RELATED-TO</code>, <code>URL</code>"},{"location":"components/#property-modifiers","title":"Property Modifiers","text":"<p>The iCalendar specification defines which properties are applicable, along with their cardinality for  iCalendar objects and components. Property modifiers provide a safe way to modify properties for existing objects and components that comply with the rules of the iCalendar specification.</p> <pre><code>event.with(DTSTART, new DtStart(\"20240101T0900000\"));\n\ntodo.with(CATEGORIES, new Categories(\"travel\"));\n</code></pre> Property Modifier Supported Properties ChangeManagementPropertyModifiers <code>CREATED</code>, <code>DTSTAMP</code>, <code>LAST-MODIFIED</code>, <code>SEQUENCE</code>, <code>SEQUENCE_INCREMENT</code> DateTimePropertyModifiers <code>COMPLETED</code>, <code>DTEND</code>, <code>DUE</code>, <code>DTSTART</code>, <code>DURATION</code>, <code>FREEBUSY</code>, <code>TRANSP</code> DescriptivePropertyModifiers <code>ATTACH</code>, <code>CATEGORIES</code>, <code>DESCRIPTION</code>, <code>SUMMARY</code> RecurrencePropertyModifiers <code>EXDATE</code>, <code>RDATE</code>, <code>RRULE</code> RelationshipPropertyModifiers <code>ATTENDEE</code>, <code>CONTACT</code>, <code>ORGANIZER</code>, <code>RECURRENCE-ID</code>, <code>RELATED-TO</code>, <code>URL</code>"},{"location":"components/#component-accessors","title":"Component Accessors","text":"<p>Component accessors provide convenience methods for subcomponent retrieval, and are implemented by components that support nested subcomponents.</p> Component Accessor Supported Components AlarmsAccessor <code>VALARM</code> LocationsAccessor <code>VLOCATION</code> ParticipantsAccessor <code>PARTICIPANT</code> ResourcesAccessor <code>VRESOURCE</code>"},{"location":"components/#recurrence-support","title":"Recurrence Support","text":"<p>Some components support the concept of recurrence, which may be defined by the inclusion of <code>RRULE</code>, <code>RDATE</code> and/or <code>EXDATE</code> properties. Components that support these properties also implement the <code>RecurrenceSupport</code> interface which defines methods for calculating discrete occurrences.</p> <pre><code>Period period = new Period(\"20230301/P1M\");\n\nList&lt;VEvent&gt; occurrences = event.getOccurrences(period);\n\nSet&lt;Period&gt; recurrenceSet = event.calculateRecurrenceSet(period);\n</code></pre>"},{"location":"configuring/","title":"Configuring iCal4j","text":"<p>This page provides a comprehensive list of all configuration properties for iCal4j libraries and services.</p>"},{"location":"configuring/#ical4j","title":"iCal4j","text":"<p>The following table describes System properties specific to the core iCal4j library.</p> System Property Description Value Default ical4j.unfolding.relaxed Enables more lenient parsing of folded (split) content lines {true/false} false ical4j.parsing.relaxed A global hint to enable more lenient parsing of iCalendar data {true/false} false ical4j.validation.relaxed A global hint that enables lenient validation of iCalendar data {true/false} false ical4j.compatibility.outlook A hint that improves compatibility with iCalendar data produced by MS Outlook {true/false} false ical4j.compatibility.notes A hint that improves compatibility with iCalendar data produced by Lotus Notes {true/false} false net.fortuna.ical4j.factory.decoder Override the default decoder implementation for working with encoded strings A fully qualified class that extends <code>net.fortuna.ical4j.util.DecoderFactory</code> <code>net.fortuna.ical4j.util.DefaultDecoderFactory</code> net.fortuna.ical4j.factory.encoder Override the default encoder implementation for working with encoded strings A fully qualified class that extends <code>net.fortuna.ical4j.util.EncoderFactory</code> <code>net.fortuna.ical4j.util.DefaultEncoderFactory</code> net.fortuna.ical4j.parser Override the default iCalendar parser implementation A fully qualified class implementing <code>net.fortuna.ical4j.data.CalendarParser</code> <code>net.fortuna.ical4j.data.CalendarParserImpl</code> net.fortuna.ical4j.recur.maxincrementcount The maximum number of increments applied to a recurrence rule when calculating instances A positive integer value (or -1 for unlimited) 1000 net.fortuna.ical4j.timezone.cache.impl Override the default cache implementation for timezone definition updates A fully qualified class implementing <code>net.fortuna.ical4j.util.TimeZoneCache</code> <code>net.fortuna.ical4j.util.MapTimeZoneCache</code> net.fortuna.ical4j.timezone.date.floating Use the local default timezone for the implementation of <code>DATE</code> properties (applicable for iCal4j 3.x and earlier) {true/false} false net.fortuna.ical4j.timezone.default.utc Use UTC as the default timezone for <code>DATE-TIME</code> properties {true/false} false net.fortuna.ical4j.timezone.offset.negative_dst_supported As the Java Timezone implementation doesn't support negative offsets, enable to ignore negative offset definitions {true/false} false net.fortuna.ical4j.timezone.registry Override the default timezone registry implementation A fully qualified class that extends <code>net.fortuna.ical4j.model.TimeZoneRegistryFactory</code> <code>net.fortuna.ical4j.model.DefaultTimeZoneRegistryFactory</code> net.fortuna.ical4j.timezone.update.enabled Enable automatic update of timezone definitions from tzurl.org {true/false} true net.fortuna.ical4j.timezone.update.host Override the default host for timezone definition updates A target host capable of supplying timezone definitions <code>www.tzurl.org</code> net.fortuna.ical4j.timezone.update.port Override the default port for timezone definition updates A port number (typically <code>80</code> or <code>443</code>) <code>443</code> net.fortuna.ical4j.timezone.update.proxy.enabled Use a proxy for timezone updates {true/false} false net.fortuna.ical4j.timezone.update.proxy.host Proxy server host name (e.g. <code>proxy.example.com</code>) A target proxy host - net.fortuna.ical4j.timezone.update.proxy.port Proxy server port (e.g. <code>3128</code>) A port number - net.fortuna.ical4j.timezone.update.proxy.type Proxy type (e.g. <code>DIRECT</code> / <code>HTTP</code> / <code>SOCKS</code>) {<code>DIRECT</code>/<code>HTTP</code>/<code>SOCKS</code>} - net.fortuna.ical4j.timezone.update.scheme Override the default scheme for timezone definition updates A URI scheme (typically <code>http</code> or <code>https</code>) <code>https</code> net.fortuna.ical4j.timezone.update.timeout.connect Specifiy a connection timeout for timezone updates A timeout in milliseconds, e.g. 10000 - 10s - net.fortuna.ical4j.timezone.update.timeout.read Specify a read timeout for timezone updates A timeout in milliseconds, e.g. 10000 - 10s -"},{"location":"configuring/#ical4j-vcard","title":"iCal4j vCard","text":"<p>The following table describes System properties applicable to the iCal4j vCard library.</p> System Property Description Value Default ical4j.parsing.relaxed A global hint to enable more lenient parsing of vCard data {true/false} false"},{"location":"configuring/#ical4j-connector","title":"iCal4j Connector","text":"<p>TBD.</p>"},{"location":"configuring/#ical4j-integration","title":"iCal4j Integration","text":"<p>TBD.</p>"},{"location":"cuas/","title":"Calendar User Agents","text":"<p>A Calendar User Agent (CUA) is software that supports the iCalendar specification. This page provides information regarding the different categories of CUAs.</p>"},{"location":"cuas/#rich-clients","title":"Rich Clients","text":""},{"location":"cuas/#microsoft-outlook","title":"Microsoft Outlook","text":"<p>Language: C   (?)  License: Proprietary  RFC2445 Deviations: * allows DATE-TIME representation without specifying a VALUE=DATE-TIME parameter * Outlook will not read files that don't contain the mandatory UID and DTSTAMP properties in VEVENT, etc. components * provides quoted TZID parameters, and as such does not conform with RFC2445 * generates additional spaces in recurrence rules containing a BYDAY component * 2003 will only accept folded lines of exactly 75 octets * 2007 will fold lines with all folded lines starting with a tab instead of spaces  Non-standard Properties: * X-MICROSOFT-CDO-BUSYSTATUS:TENTATIVE  * X-MICROSOFT-CDO-IMPORTANCE:1  * X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY  * X-MICROSOFT-DISALLOW-COUNTER:FALSE  * X-MS-OLK-ALLOWEXTERNCHECK:TRUE  * X-MS-OLK-AUTOSTARTCHECK:FALSE  * X-MS-OLK-CONFTYPE:0  * X-MS-OLK-SENDER;CN=Test:mailto:user@example.com </p>"},{"location":"cuas/#lotus-notes","title":"Lotus Notes","text":"<p>Language: C   (?)  License: Proprietary  RFC2445 Deviations: * Requires METHOD:REQUEST for non-optional attendees  Non-standard Properties: * X-LOTUS-BROADCAST:FALSE (required for non-optional organizer?) * X-LOTUS-CHARSET:UTF-8  * X-LOTUS-UPDATE-SEQ:1  * X-LOTUS-UPDATE-WISL:$S:1;$L:1;$B:1;$R:1;$E:1;$W:1;$O:1;$M:1  * X-LOTUS-NOTESVERSION:2  * X-LOTUS-NOTICETYPE:I  * X-LOTUS-APPTTYPE:3  * X-LOTUS-CHILD_UID:9DA9112BB4438073C125750E004B7055  </p>"},{"location":"cuas/#mozilla-calendar","title":"Mozilla Calendar","text":"<p>Language: C   (?)  License: MPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values * Generates non-standard \"X\" properties </p>"},{"location":"cuas/#apple-ical","title":"Apple iCal","text":"<p>Language: Unknown  License: Proprietary  RFC2445 Deviations: * uses VALUE=TEXT on some X-properties (NOTE: this is valid behaviour) * iCal events don't include the mandatory DTSTAMP property * iCal 1.0 doesn't appear to include VTIMEZONE definitions where applicable (this appears fixed as of 1.5) </p>"},{"location":"cuas/#evolution","title":"Evolution","text":"<p>Language: C   (?)  License: GPL </p>"},{"location":"cuas/#korganizer","title":"KOrganizer","text":"<p>Language: C   (?)  License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) * folds all property parameters and values </p>"},{"location":"cuas/#chandler","title":"Chandler","text":"<p>Language: Python  License: GPL</p> <p></p>"},{"location":"cuas/#k5n-desktop-calendar-k5ncal","title":"k5n Desktop Calendar (k5nCal)","text":"<p>Language: Java 1.5  License: GPL (3rd party libraries with other licenses)</p>"},{"location":"cuas/#web-applications","title":"Web Applications","text":""},{"location":"cuas/#php-icalendar","title":"PHP iCalendar","text":"<p>Language: PHP  License: GPL RFC2445 Deviations: * long content lines are folded with a single LF character (should be CRLF) </p>"},{"location":"cuas/#webical","title":"Webical","text":"<p>Language: Java  License: GPL </p>"},{"location":"cuas/#google-calendar","title":"Google Calendar","text":"<p>Language: Unknown  License: N/A  RFC2445 Deviations: * Generates DTSTART properties in DATE format without specifying the required VALUE=DATE parameter</p>"},{"location":"cuas/#webcalendar","title":"WebCalendar","text":"<p>Language: PHP  License: GPL  RFC2445 Deviations: * Generates invalid ATTENDEE lines</p>"},{"location":"cuas/#calendar-servers","title":"Calendar Servers","text":""},{"location":"cuas/#hula-project","title":"Hula Project","text":"<p>Language: Unknown  License: GPL</p>"},{"location":"cuas/#cosmo","title":"Cosmo","text":"<p>Language: Java  License: Apache 2.0</p>"},{"location":"datetime/","title":"Date/Time Concepts","text":"<p>Date and time types in iCal4j are all extensions of the Iso8601 type. This type uses a date format instance (with an associated timezone) for string parsing and formatting.</p>"},{"location":"datetime/#date","title":"Date","text":"<p>A Date represents a day of the year, with no time component. As time is irrelevant for a Date instance, no timezone information is associated with a Date (*).</p> <ul> <li>Note that with the iCal4j implementation this is not entirely true. As dates are represented using Java's java.text.DateFormat, a timezone is inherently associated with dates. For this reason, by default Date implementations will use the GMT timezone for formatting and parsing. You can override this to use the local timezone by specifying the following flag as a system property or in the ical4j.properties file:</li> </ul> <pre><code>net.fortuna.ical4j.timezone.date.floating=true\n</code></pre>"},{"location":"datetime/#datetime","title":"DateTime","text":"<p>A DateTime represents a time of day on a specific day of the year. There are three (3) variants of DateTime representation.</p>"},{"location":"datetime/#date-with-local-time","title":"Date with Local Time","text":"<p>A date with local time does not explicitly specify an associated timezone, and is said to be \"floating\" in the sense that it represents a time in the local timezone of the CUA. For this reason, floating DateTime instances will always use the default timezone for parsing and formatting string representations. An example of a floating DateTime instance is as follows:</p> <pre><code>DTSTART:19980118T230000\n</code></pre>"},{"location":"datetime/#date-with-utc-time","title":"Date with UTC Time","text":"<p>A DateTime may be specified as in UTC time by appending a 'Z' to the string representation as follows:</p> <pre><code>DTSTART:19980119T070000Z\n</code></pre> <p>In iCal4j, a DateTime instance parsed from such a string representation, or explicitly defined as a UTC instance, will use the \"Etc/UTC\" timezone for parsing and formatting string representations.</p>"},{"location":"datetime/#date-with-local-time-and-a-timezone-reference","title":"Date with Local Time and a Timezone reference","text":"<p>A DateTime may also be specified with a timezone reference, meaning that the time is associated with an explicit timezone. For example:</p> <pre><code>DTSTART;TZID=US-Eastern:19980119T020000\n</code></pre> <p>In iCal4j, DateTime instances generated from parsing such a string, or explicitly defined with an associated timezone, will use the specified timezone for parsing and formatting string representations.</p>"},{"location":"encoding/","title":"Content Encoding","text":""},{"location":"encoding/#supported-encodings","title":"Supported Encodings","text":"<p>By default, iCal4j supports the MIME encodings specified in RFC2045 as follows:</p> <ul> <li>7BIT - An \"indicator\" that the data is 7bit data.</li> <li>8BIT - An \"indicator\" that the data is 8bit data.</li> <li>BINARY - An \"indicator\" that the data is binary data.</li> <li>QUOTED-PRINTABLE - Transforms data into printable ASCII characters.</li> <li>BASE64 - Transforms data into the Base64 representation of its bytes.</li> </ul>"},{"location":"encoding/#additional-encodings","title":"Additional Encodings","text":"<p>You may add support for additional encodings by providing an implementation of <pre>net.fortuna.ical4j.util.EncoderFactory</pre> and/or <pre>net.fortuna.ical4j.util.DecoderFactory</pre>. You can instruct iCal4j to use these factories by specifying the following system properties:</p> <pre><code>net.fortuna.ical4j.factory.encoder=&lt;encoder_factory_class_name&gt;\n\nnet.fortuna.ical4j.factory.decoder=&lt;decoder_factory_class_name&gt;\n</code></pre>"},{"location":"external-resources/","title":"References","text":""},{"location":"external-resources/#resources","title":"Resources","text":"<p>Source code: https://github.com/ical4j/ical4j</p> <p>Documentation: https://ical4j.github.io/docs/ical4j</p> <p>Releases: https://bintray.com/ical4j/maven/ical4j</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#q-why-does-ical4j-use-jakarta-commons-logging","title":"Q. Why does iCal4j use Jakarta Commons Logging?","text":"<p>A. I guess this is a question everyone is confronted with these days - I think much of the hostility towards commons logging is way overdone, but here are my reasons anyway: </p> <ul> <li>I like log4j. I think its easier to use than java.util.logging. That's not to say that java.util.logging won't get better, or maybe another logging API will surpass log4j. So I'd like to leave the option open. </li> <li>Following on from that, I also believe that the users of iCal4j should be free to choose what logging API they use. I don't want to force iCal4j users to use log4j just because I prefer it. </li> <li>Commons logging is much smaller than log4j, so it is more friendly to include in the iCal4j distribution. Adding log4j would add an extra few hundred kilobytes. </li> <li>I have seen many of the arguments against commons logging, and to some extent I agree: if you have a controlled development environment you may as well impose a concrete logging implementation (e.g. log4j). But with iCal4j I want to leave the choice up to the users (see 2. again!).</li> </ul>"},{"location":"faq/#q-why-does-ical4j-provide-its-own-date-and-timezone-implementations-rather-than-using-something-like-joda-time","title":"Q. Why does iCal4j provide its own Date and Timezone implementations rather than using something like Joda Time?","text":"<p>A. I have looked into it (especially for timezones) but found Joda Time to be a bit too heavy-weight for iCal4j. I also believe that for iCal4j its better to stick to the standard Java API that everyone knows rather than forcing people to learn a new Date/Time API. I think if Sun had used a few more interfaces in defining their Date/Time API we would all be better off, but unfortunately we have to make do with what we have.</p>"},{"location":"faq/#q-where-does-ical4j-get-timezone-information-from","title":"Q. Where does iCal4j get timezone information from?","text":"<p>A. Timezone definitions in iCal4j are generated from the [Olson] [http://en.wikipedia.org/wiki/Zoneinfo Zoneinfo] database. Each release of iCal4j is updated with the latest Olson definitions. http://java.sun.com/developer/technicalArticles/Intl/FAQ_appendix.html This article from Sun appears to offer some details about the changes introduced in each release of the Olson data.</p>"},{"location":"faq/#q-why-does-ical4j-have-a-minimum-requirement-of-java-14-is-it-possible-to-use-ical4j-with-a-pre-14-java-runtime","title":"Q. Why does iCal4j have a minimum requirement of Java 1.4? Is it possible to use iCal4j with a pre-1.4 Java runtime?","text":"<p>A. Choosing Java 1.4 as the minimum required JVM was initially slightly arbitrary, and probably based on the fact that most people were using 1.4 as a minimum. </p> <p>Since then, however, there are three features of 1.4 I can think of that iCal4j requires: the URI class, the java.util.regex.* package (used in StringUtils) and the java.nio.charset package. </p> <p>If you don't think you will be needing these features in your own code, you may want to try compiling iCal4j with JDK 1.4 using the \"-target 1.3\" option but without specifying an alternative \"-bootclasspath\" option. From what I can tell, this should generate 1.3 bytecode that you can run on a 1.3 JVM. Note however, that if your code does cause iCal4j to load the URI or java.util.regex.* references then it will fail on a 1.3 JVM (as these APIs aren't available).</p>"},{"location":"faq/#q-when-i-create-a-geo-property-using-bigdecimals-the-string-representation-is-incorrect-eg","title":"Q. When I create a GEO property using BigDecimals the string representation is incorrect. e.g:","text":"<pre>\n        BigDecimal latitude = new BigDecimal(65.35);\n        BigDecimal longitude = new BigDecimal(22.01);\n        Geo geo = new Geo(latitude, longitude);\n\nOutput:\n\n        GEO:65.349999999999994315658113919198513031005859375;22.01000000000000156\n</pre> <p>A. This problem occurs when the number specified cannot accurately be represented by a double value in Java. More on this effect [here]. The solution is to use either a string representation of the specified number, or http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#valueOf(double) BigDecimal.valueOf(double) to create your BigDecimal. i.e:</p> <pre>\n        BigDecimal latitude = BigDecimal.valueOf(65.35);\n        BigDecimal longitude = BigDecimal.valueOf(22.01);\n\n        Geo geo = new Geo(latitude, longitude);\n</pre>"},{"location":"faq/#q-how-do-i-generate-calendar-data-using-a-non-standard-charset","title":"Q. How do I generate calendar data using a non-standard charset?","text":"<p>A. The default charset used by the CalendarOutputter is UTF-8. If you would like to generate calendar data using a different charset you can do so by creating an instance of OutputStreamWriter (or whatever type of Writer you prefer), specifying the charset via the constructor. The CalendarOutputter will respect the charset specified for a Writer provided via the method:</p> <pre>CalendarOutputter.output(Calendar calendar, Writer out)</pre>"},{"location":"faq/#q-does-ical4j-work-with-android-i-tried-using-it-in-my-android-project-but-i-get-a-verifier-rejected-class-error","title":"Q. Does iCal4j work with Android? I tried using it in my Android project but I get a \"verifier rejected class\" error.","text":"<p>A. iCal4j does works with Android, however you must remember to include the following iCal4j dependencies in addition to the iCal4j library:</p> <ul> <li>commons-lang</li> <li>commons-logging (Possibly optional - due to unofficial inclusion with Android)</li> <li>commons-codec (Possibly optional - due to unofficial inclusion with Android)</li> </ul> <p>For more details see https://github.com/ical4j/ical4j/wiki/Android.</p>"},{"location":"faq/#q-how-do-i-create-a-meeting-request-in-ms-outlook-that-can-be-accepted-by-the-organizer","title":"Q. How do I create a meeting request in MS Outlook that can be accepted by the Organizer?","text":"<p>A. It appears there is a bug in MS Outlook that can be solved by a hotfix. See here for details.</p>"},{"location":"faq/#q-i-cannot-find-the-answer-to-my-question-what-should-i-do-now","title":"Q. I cannot find the answer to my question. What should I do now?","text":"<p>A. If you cannot find what you need on this Wiki, the next best thing is to post a question in the forums.</p>"},{"location":"filtering/","title":"iCal4j Filters","text":"<p>In addition to a robust and compliant implementation of the iCalendar specification, it is also important to have an expressive and powerful mechanism for accessing calendar data. iCal4j filters provide a framework for calendar object retrieval whether it be in-memory object models or some other data source.</p> <p></p>"},{"location":"filtering/#filter-expressions","title":"Filter Expressions","text":"<p>Filter expressions serve to provide an abstract syntax tree (AST) for modeling an iCalendar filter that can be used to filter data from various data sources.</p>"},{"location":"filtering/#unary-expression","title":"Unary Expression","text":"<p>A unary expression contains a single operand and operator, with the operand being another expression. Unary expressions may be of prefix or postfix form:</p> <ul> <li><code>&lt;operator&gt; &lt;operand&gt; # prefix unary expression, such as 'not something'</code></li> <li><code>&lt;operand&gt; &lt;operator&gt; # postfix expression, such as 'something exists'</code></li> </ul> <p>Some example unary expressions include:</p> <ul> <li><code>not attendee = 'joeb@example.com' # events not including joeb</code> </li> <li><code>not due &lt; startOfDay() # todos that are not overdue</code></li> <li><code>attendee[partstat:TENTATIVE] exists # events with tentative attendees</code></li> <li><code>attendee[role:CHAIR] not exists # events without a chair</code></li> </ul>"},{"location":"filtering/#binary-expression","title":"Binary Expression","text":"<p>A binary expression include a left and right operand and and operator.</p> <p>Some example binary expressions include:</p> <ul> <li><code>attendee = 'job@example.com # events including joeb</code></li> <li><code>due &lt; startOfDay() # todos that are overdue</code></li> </ul>"},{"location":"filtering/#specification-expression","title":"Specification Expression","text":"<p>A specification expression represents an object specification, with a name, optional value and attributes. For example, a specification representing a property would be a property name, (optional) property value and a list of parameter attributes.</p> <p>A specification match is defined as matching object name and the existence of the specified attributes. If a value is supplied this must also match the object value.</p> <p>NOTE: The specification value is used to test object equivalence with unary expressions. For binary expression matching the literal expression is used to provide a value.</p>"},{"location":"filtering/#literal-expression","title":"Literal Expression","text":"<p>A literal expression is the mechanism to supply a specification value for binary expressions. Supported literals include String, Integer, Date, Collection and Function, which may be used with both comparison and value matching operators.</p>"},{"location":"filtering/#expression-operators","title":"Expression Operators","text":"<p>Operators are used in binary and unary expressions to specify expression behaviour.</p>"},{"location":"filtering/#object-matching-operators","title":"Object Matching Operators","text":"<p>An object matching operator is used to test for existence of an object matching the specification. In addition to the specification used in unary expressions, binary expressions also test for a literal value.</p> <p>Object matching operators include:</p> <ul> <li><code>equalTo</code> - a binary expression operator that matches object exactly on both specification and literal value</li> <li><code>notEqualTo</code> - the negative of the <code>equalTo</code> operator</li> <li><code>in</code> - a binary expression operator that matches exactly any object in the collection literal</li> <li><code>notIn</code> - the negative of the <code>in</code> operator.</li> <li><code>exists</code> - a unary expression operator that tests for the existence of the specified operand  (only applicable for specification expression operands)</li> <li><code>not exists</code> - the negative of the exists operator</li> </ul>"},{"location":"filtering/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators include:</p> <ul> <li><code>greaterThan</code>- a binary expression operator that matches object comparison greater than the supplied specification value</li> <li><code>greaterThanEqual</code>a binary expression operator that matches object comparison greater than or equal to the supplied specification value</li> <li><code>lessThan</code>a binary expression operator that matches object comparison less than the supplied specification value</li> <li><code>lessThanEqual</code>a binary expression operator that matches object comparison less than or equal to the supplied specification value</li> <li><code>between</code>a binary expression operator that matches object comparison greater than or equal to the first element in the supplied specification collection, and less than or equal to the second specification collection value</li> </ul>"},{"location":"filtering/#value-matching-operators","title":"Value Matching Operators","text":"<p>Value matching operators include:</p> <ul> <li><code>contains</code>a binary expression operator that matches object values that contain the supplied specification value string</li> <li><code>matches</code>a binary expression operator that matches object values against the supplied specification regular expression</li> </ul>"},{"location":"filtering/#logical-operators","title":"Logical Operators","text":"<p>Logical operators include:</p> <ul> <li><code>and</code>a binary expression operator that returns the logical and of two expressions (not applicable for specification or literal expression operands)</li> <li><code>or</code>a binary expression operator that returns the logical or of two expressions (not applicable for specification or literal expression operands)</li> <li><code>not</code> - the negation of the operand expression (not applicable for specification or literal expression operands)</li> </ul>"},{"location":"filtering/#expression-parser","title":"Expression Parser","text":"<p>TBD.</p>"},{"location":"filtering/#component-filter","title":"Component Filter","text":"<p>The ComponentFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Components.</p>"},{"location":"filtering/#property-filter","title":"Property Filter","text":"<p>The PropertyFilter is an implementation of a PredicateFactory that is able to convert a filter expression into a Predicate for iCal4j Properties.</p>"},{"location":"freebusy/","title":"iCal4j - FreeBusy","text":"<p>The iCal4j FreeBusy service provides support for generating iCalendar free/busy information from existing iCalendar data.</p>"},{"location":"freebusy/#overview","title":"Overview","text":"<p>The iCalendar specification defines the <code>VFREEBUSY</code> component that may be used to request, respond or publish resource availability.</p>"},{"location":"freebusy/#command-line-usage","title":"Command Line Usage","text":""},{"location":"freebusy/#query-for-free-one-hour-slots","title":"Query for free one hour slots","text":"<pre><code>ical4j-freebusy/bin/ical4j-freebusy request -F ./Australian32Holidays.ics\n</code></pre> <p>Result:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VFREEBUSY\nDTSTAMP:20230113T130148Z\nDTSTART:20230113T130148Z\nDTEND:20230120T130148Z\nDURATION:PT1H\nFREEBUSY;FBTYPE=FREE:20230113T130148Z/P1W\nEND:VFREEBUSY\nEND:VCALENDAR\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>iCal4j provides solutions for many scenarios involving the iCalendar and vCard specifications. Here you will find an explanation of some of the features available and when to use them.</p>"},{"location":"getting-started/#ical4j","title":"iCal4j","text":"<p>If you are interested in creating iCalendar object definitions (i.e. *.ics format), you can use the core iCal4j library. This library supports creation of iCalendar object models, including validation and export to a file. See the examples for how to build iCalendar objects.</p> <p>Similarly, if you want to parse and work with existing iCalendar data the core library also supports this. In addition to validation you can perform filtering and lookups on model data, and generate temporal information from recurring events, etc.</p>"},{"location":"getting-started/#ical4j-extensions","title":"iCal4j Extensions","text":"<p>If your object model requires support for extended component or properties, you can include the  extensions library in your classpath. This includes support for things like CalDAV extensions, <code>X-WR-TIMEZONE</code>, and more properties not found in the core specifications.</p>"},{"location":"getting-started/#ical4j-vcard","title":"iCal4j vCard","text":"<p>If you need to create or parse vCard data (i.e. *.vcf format) you can use the vCard library. This library is an extension to the core library and shares some of the same foundations, including support for validation and filtering.</p>"},{"location":"getting-started/#ical4j-zoneinfo-outlook","title":"iCal4j Zoneinfo Outlook","text":"<p>If you have data compatibility concerns regarding timezones, you might try using the Zoneinfo Outlook library. This provides an alternate set of timezone data that use  simplified recurrence definitions.</p>"},{"location":"getting-started/#ical4j-template","title":"iCal4j Template","text":"<p>If you are unsure of which properties you need to use for maximum compatibility with all Calendar User Agents, you can try the template library. This library provides support for creating and modifying  iCalendar objects to conform with a predefined object type.</p>"},{"location":"getting-started/#ical4j-command","title":"iCal4j Command","text":"<p>The command library provides an execution framework for common operations when working with iCalendar. This library is also distributed as a command-line application that can be used with iCalendar without any coding required.</p>"},{"location":"getting-started/#ical4j-connector","title":"iCal4j Connector","text":"<p>If you want to access a persistent calendar store you can use the connector library. This library supports CalDAV/CardDAV repositories, as well as a simple local filesystem store.</p>"},{"location":"getting-started/#ical4j-integration","title":"iCal4j Integration","text":"<p>For publishing and consuming iCalendar objects from external actors, the integration library provides support for common transports such as email.</p>"},{"location":"getting-started/#ical4j-serializer","title":"iCal4j Serializer","text":"<p>iCalendar includes specifications for converting to and from equivalent XML/JSON formats, which is supported by the serializer library. This library also includes support for other conversions including  JMAP, Atom, and a custom JSON-based format for API development (JOTN).</p>"},{"location":"getting-started/#ical4j-streams","title":"iCal4j Streams","text":"<p>If you are implementing workflow automation as part of your iCalendar use-case, you may want to look at the streams library. This includes a simple workflow definition language and engine for producing tasks that may be subsequently acted upon by one or more execution agents.</p>"},{"location":"getting-started/#maven-dependencies","title":"Maven Dependencies","text":"<p>iCal4j libraries are currently published directly to Maven Central. Use the following table to identify current coordinates for iCal4j libraries:</p> Name Current Coordinates Deprecated Coordinates ical4j org.mnode.ical4j:ical4j - ical4j-vcard org.mnode.ical4j:ical4j-vcard - ical4j-extensions org.mnode.ical4j:ical4j-extensions - ical4j-zoneinfo-outlook org.mnode.ical4j:ical4j-zoneinfo-outlook - ical4j-template org.ical4j:ical4j-template - ical4j-command org.ical4j:ical4j-command org.ical4j:ical4j-validator ical4j-connector org.ical4j:ical4j-connector org.mnode.ical4j:ical4j-connector ical4j-integration org.ical4j:ical4j-integration org.mnode.ical4j:ical4j-integration ical4j-serializer org.ical4j:ical4j-serializer org.mnode.ical4j:ical4j-serializer, org.mnode.ical4j:ical4j-json ical4j-actions Coming Soon -"},{"location":"groovy/","title":"Groovy Support","text":""},{"location":"groovy/#content-builder","title":"Content Builder","text":"<p>Constructing iCalendar and vCard object models can be quite a tedious process in Java, however the Groovy-based ContentBuilder simplifies this task:</p>"},{"location":"groovy/#vcard","title":"vCard","text":"<pre><code>def builder = new ContentBuilder()\ndef card = builder.vcard() {\n    version '4.0'\n    fn 'test'\n    n 'example'\n    photo 'http://example.com/photo', parameters: [value('uri')]\n}\ncard.validate()\n</code></pre> <p>Where a property doesn't require any parameters the syntax may be even more concise:</p> <pre><code>def builder = new ContentBuilder()\ndef card = builder.vcard() {\n    version '4.0'\n    fn 'test'\n    n 'example'\n    photo 'http://example.com/photo', parameters: [value('uri')]\n}\ncard.validate()\n</code></pre> <p>Property parameters that are not required for property construction may also be nested:</p> <pre><code>def builder = new ContentBuilder()\ndef card = builder.vcard() {\n    version '4.0'\n    fn 'test'\n    n 'example' {\n        value('text')\n    }\n    photo 'http://example.com/photo', parameters: [value('uri')]\n}\ncard.validate()\n</code></pre> <p>Attach a photo as encoded binary data:</p> <pre><code>def builder = new ContentBuilder()\ndef card = builder.vcard() {\n    version '4.0'\n    fn 'test'\n    n 'example' {\n        value 'text'\n    }\n    photo(new File('http://example.com/photo.png').bytes.encodeBase64() as String)\n}\ncard.validate()\n</code></pre>"},{"location":"groovy/#icalendar","title":"iCalendar","text":"<pre><code>def builder = new ContentBuilder()\ndef calendar = builder.calendar() {\n    prodid '-//Ben Fortuna//iCal4j 1.0//EN'\n    version '2.0'\n    vevent {\n        uid '1'\n        dtstamp new DtStamp()\n        dtstart '20090810', parameters: parameters() {\n            value 'DATE'\n        }\n        action 'DISPLAY'\n        attach 'http://example.com/attachment', parameters: parameters() {\n            value 'URI'\n        }\n    }\n}\n</code></pre> <p>Attach a vCard to an iCalendar object:</p> <pre><code>import net.fortuna.ical4j.model.property.DtStamp\n\ndef icalendar = new net.fortuna.ical4j.model.ContentBuilder();\ndef vcard = new net.fortuna.ical4j.vcard.ContentBuilder();\n\ndef card = vcard.vcard() {\n    version '4.0'\n    fn 'test'\n    n 'example'\n    photo 'http://example.com/photo', parameters: [value('uri')]\n}\ncard.validate()\n//println(card)\n\ndef calendar = icalendar.calendar() {\n    prodid '-//Ben Fortuna//iCal4j 1.0//EN'\n    version '2.0'\n    vevent {\n        uid '1'\n        dtstamp new DtStamp()\n        dtstart '20090810', parameters: parameters() {\n            value 'DATE'\n        }\n        action 'DISPLAY'\n        attach 'http://example.com/attachment', parameters: parameters() {\n            value 'URI'\n        }\n        attach card.toString(), parameters: parameters() {\n            fmttype 'text/vcard'\n            encoding '8BIT'\n            value 'TEXT'\n        }\n    }\n}\n\ncalendar.validate()\nprintln(calendar)\n</code></pre>"},{"location":"groovy/#groovlet","title":"Groovlet","text":"<p>Here is an example Groovlet that parses a specified calendar and outputs all of the event summaries in HTML:</p> <pre><code>import net.fortuna.ical4j.data.CalendarBuilder\nimport net.fortuna.ical4j.model.Calendar\nimport net.fortuna.ical4j.model.Component\nimport net.fortuna.ical4j.model.component.VEvent\n\nhtml.html {\n    head {\n        title \"Event Summary\"\n    }\n\n    body {\n        def builder = new CalendarBuilder()\n        def calendar = builder.build(new URL(request.getParameter(\"u\")).openStream())\n\n        if (calendar.getProperty(\"X-WR-CALNAME\")) {\n            h1 calendar.getProperty(\"X-WR-CALNAME\").getValue()\n        }\n        else if (calendar.getProperty(\"X-WR-CALDESC\")) {\n            h1 calendar.getProperty(\"X-WR-CALDESC\").getValue()\n        }\n        else {\n            h1 \"Event Summary\"\n        }\n\n        table {\n            tbody {\n                for (event in calendar.getComponents(Component.VEVENT)) {\n                    if (event.getSummary()) {\n                        tr {\n                            td event.getSummary().getValue()\n                            td event.getStartDate().getDate()\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"groovy/#gsp","title":"GSP","text":"<p>Here is an [article] demonstrating iCal4j and http://groovy.codehaus.org/GSP GSP integration.</p>"},{"location":"groovy/#grails-icalendar-plugin","title":"Grails - iCalendar Plugin","text":"<p>Here is an introduction how to use iCal4j and Grails with the iCalendar Grails Plugin.</p>"},{"location":"groovy/#using-grape","title":"Using Grape","text":"<p>You can also use [Grape] to manage your iCal4j dependencies, however you will need to add the Modularity Maven repositories to your http://groovy.codehaus.org/Grape#Grape-CustomizeIvysettings Grape config as follows:</p> <pre><code>&lt;ivysettings&gt;\n  ...\n  &lt;resolvers&gt;\n    &lt;chain name=\"downloadGrapes\"&gt;\n      ...\n      &lt;ibiblio name=\"mvnrepo\" root=\"https://mvnrepository.com/\" m2compatible=\"true\" /&gt;\n    &lt;/chain&gt;\n  &lt;/resolvers&gt;\n&lt;/ivysettings&gt;\n</code></pre> <p>Then you can use scripts like this without any dependency configuration required:</p> <pre><code>import net.fortuna.ical4j.vcard.ContentBuilder\nimport net.fortuna.ical4j.model.property.DtStamp\n\n@Grab(group='org.mnode.ical4j', module='ical4j', version='1.0.2')\n@Grab(group='org.mnode.ical4j', module='ical4j-vcard', version='0.9.6.2')\ndef getCalendar() {\n    def builder = new ContentBuilder()\n    builder.calendar() {\n        prodid('-//Ben Fortuna//iCal4j 1.0//EN')\n        version('2.0')\n        vevent() {\n            uid('1')\n            dtstamp(new DtStamp())\n            dtstart('20090810', parameters: parameters() {\n                value('DATE')})\n            action('DISPLAY')\n            attach('http://example.com/attachment', parameters: parameters() {\n                value('URI')})\n        }\n    }\n}\n\nprintln(calendar)\n</code></pre>"},{"location":"groovy/#connecting-to-a-caldav-store","title":"Connecting to a CalDAV Store","text":"<p>You can also use the iCal4j connector to connect to a CalDAV store (e.g. Google Calendar). For example:</p> <pre><code>import net.fortuna.ical4j.connector.dav.CalDavCalendarStore\nimport net.fortuna.ical4j.connector.dav.PathResolver\nimport org.apache.commons.httpclient.protocol.Protocol\n\nclass GCalPathResolver extends PathResolver {\n  String getPrincipalPath(String username) {\n    return \"/calendar/dav/\" + username + \"/events/\"\n  }\n\n  String getUserPath(String username) {\n    return \"/calendar/dav/\" + username + \"/user/\"\n  }\n}\n\n@Grab(group='net.fortuna.ical4j', module='ical4j-connector', version='0.9.1-SNAPSHOT')\n@Grab(group='org.slf4j', module='slf4j-simple', version='1.5.3')\ndef getCollections() {\n  def PRODID = \"-//Ben Fortuna//iCal4j Connector 1.0//EN\"\n  def host = \"www.google.com\"\n  def port = 443\n  def path = \"/calendar/dav/\"\n  def protocol = Protocol.getProtocol(\"https\")\n  def pathResolver = new GCalPathResolver()\n  def store = new CalDavCalendarStore(PRODID, host, port, protocol, pathResolver)\n  store.connect('&lt;username&gt;', '&lt;password&gt;'.toCharArray())\n  def collections = store.collections\n}\n\ncollections.each() {\n  println \"${it.description}: ${it.components.size()}\"\n}\n</code></pre>"},{"location":"indexing/","title":"Calendar Indexing","text":"<p>Indexing of components and properties provides a mechanism to improve the performance of component and property retrieval from calendar data. Typically you might use indexing in situations where you are repeatedly inspecting a calendar for components with specific property values and/or properties with specific parameter values.</p>"},{"location":"indexing/#example","title":"Example","text":"<p>An example scenario might be where you have regular updates to input calendar data and need to identify if events in that calendar already exist in a master calendar. As you would be repeatedly inspecting the master calendar for events, it would make sense to index the components in this calendar as follows:</p> <pre><code>IndexedComponentList indexedEvents = new IndexedComponentList(myCalendar.getComponents(Component.VEVENT), Property.UID);\n</code></pre> <p>Note that we are using the UID property to identify unique events. Now we can use the indexed list to quickly identify if an event exists already as follows:</p> <pre><code>for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) {\n  VEvent event = (VEvent) i.next();\n  if (indexedEvents.getComponent(event.getUid().getValue()) == null) {\n    myCalendar.getComponents().add(event);\n  }\n}\n</code></pre> <p>We should also incorporate checking for modified events as well, which can be achieved by simply comparing two events for equality as follows:</p> <pre><code>for (Iterator i = inputCalendar.getComponents(Component.VEVENT).iterator(); i.hasNext();) {\n  VEvent event = (VEvent) i.next();\n\n  Component existing = indexedEvents.getComponent(event.getUid().getValue());\n  if (existing == null) {\n    myCalendar.getComponents().add(event);\n  }\n  else if (!event.equals(existing)) {\n    // remove existing event and add modified one..\n    myCalendar.getComponents().remove(existing);\n    myCalendar.getComponents().add(event);\n  }\n}\n</code></pre>"},{"location":"maven/","title":"Maven Support","text":""},{"location":"maven/#releases","title":"Releases","text":"<p>All iCal4j artifacts may now be found in the maven central repository. To add a dependency add it to your configuration as follows:</p> <pre><code>&lt;project&gt;\n  ...\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;org.mnode.ical4j&lt;/groupId&gt;\n      &lt;artifactId&gt;ical4j&lt;/artifactId&gt;\n      &lt;version&gt;1.0.2&lt;/version&gt;\n    &lt;/dependency&gt;\n    ...\n  &lt;/dependencies&gt;\n  ...\n&lt;/project&gt;\n</code></pre>"},{"location":"maven/#snapshots","title":"Snapshots","text":"<p>Snapshot releases are also available from the Sonatype Snapshot Repository</p>"},{"location":"osgi/","title":"iCal4j support for OSGi","text":"<p>All iCal4j libraries include metadata for OSGi compatibility. This page outlines some of the ways you may use iCal4j with an OSGi-based solution.</p>"},{"location":"osgi/#overview","title":"Overview","text":"<p>TBD.</p>"},{"location":"osgi/#apache-karaf","title":"Apache Karaf","text":"<p>TBD.</p>"},{"location":"parameters/","title":"iCalendar Parameters","text":"<p>The iCalendar specification defines parameters that may be added to properties to define metadata such as value type or classification.</p>"},{"location":"parameters/#immutable-classes","title":"Immutable Classes","text":"<p>In iCal4j parameters are represented by immutable classes. This means that parameters may be shared across multiple properties as there value will never change.</p> <pre><code>FmtType format = new FmtType(\"application/pdf\");\n\nAttach attachment1 = new Attach(\"https://files.example.com/attachments/1.pdf\")\n        .add(format);\nAttach attachment2 = new Attach(\"https://files.example.com/attachments/2.pdf\")\n        .add(format);\n</code></pre>"},{"location":"parameters/#predefined-constants","title":"Predefined Constants","text":"<p>Some parameters are defined with a finite set of possible values, in which case constants are provided.</p> <pre><code>Attendee attendee1 = new Attendee(\"mailto:joe@example.com\")\n        .add(CuType.INDIVIDUAL).add(Role.REQ_PARTICIPANT).add(Rsvp.TRUE);\n\nAttendee attendee2 = new Attendee(\"mailto:sally@example.com\")\n        .add(CuType.INDIVIDUAL).add(Role.OPT_PARTICIPANT).add(Rsvp.TRUE);\n</code></pre>"},{"location":"parser/","title":"iCal4j Parser","text":"<p>The iCal4j parsing functionality is designed to allow the use of alternate parser and content handler implementations.</p> <p></p>"},{"location":"parser/#netfortunaical4jdatacalendarparser","title":"net.fortuna.ical4j.data.CalendarParser","text":"<p>The CalendarParser interface defines two methods that implementors must provide implementations for. The first method parses data from a java.io.InputStream, whilst the second reads from a java.io.Reader. Both methods must notify the specified ContentHandler by calling the appropriate methods on parse events. The default parser implementation used by iCal4j is the net.fortuna.ical4j.data.CalendarParserImpl.</p>"},{"location":"parser/#netfortunaical4jdatacontenthandler","title":"net.fortuna.ical4j.data.ContentHandler","text":"<p>Implementors of the ContentHandler interface typically use the parse event notification methods to build a calendar representation (i.e. an object model). The default ContentHandler implementation for iCal4j is the CalendarBuilder.</p>"},{"location":"parser/#netfortunaical4jdatacalendarbuilder","title":"net.fortuna.ical4j.data.CalendarBuilder","text":"<p>CalendarBuilder is the default starting point for parsing an iCalendar data stream into an iCal4j object model. A CalendarBuilder instance requires both a CalendarParser (for parsing the data stream) and TimeZoneRegistry instance, however contructors are available that will use default implementations.</p>"},{"location":"projects/","title":"Projects using iCal4j","text":"<p>The projects listed on this page use iCal4j to provide support for the iCalendar specification.</p> <p>{|style=\"border: 1px solid silver;\" !Name!!Description!!License |- |[Bedework]||A web-based calendar application||http://www.bedework.org/bedework/update.do?artcenterkey=6 BSD License |- |[Zimbra]||Web-based collaboration suite||http://zimbra.com/license/collaboration_suite_collective_license_1.0.html Zimbra Collective License |- |[Cosmo]||A CalDAV-based Calendar Server||http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Opencap]||A standards-based Internet Calendaring server||http://www.apache.org/licenses/LICENSE-2.0.html Apache Software License |- |[Plugin Confluence Calendar Plugin]||Adds Calendar support to Confluence||http://svn.atlassian.com/fisheye/viewrep/~raw,r=1739/public/contrib/confluence/calendar-plugin/trunk/LICENSE.txt BSD License |- |[FinchSync]||Calendar synchronisation||http://www.finchsync.com/download.html FinchSync License |- |iCalendar Validator||Validation of iCalendar files||N/A |- |[Webical]||Web based editing of remote iCalendars ||http://www.opensource.org/licenses/gpl-license.php GPL |- |[Open Project Services]||Project collaboration platform ||http://www.opensource.org/licenses/gpl-license.php GPL |- |[Teamwork]||Project collaboration software||http://www.opensource.org/licenses/gpl-license.php GPL/commercial |- |[okgo]||A desktop RSS calendar ||http://creativecommons.org/licenses/GPL/2.0/ GPL |- |Tate Online||British and international modern and contemporary art||N/A |- |[GCALDaemon]||A calendar synchroniser||http://gcaldaemon.sourceforge.net/license.html LGPL |- |[Funambol GroupDAV Connector]||GroupDAV sync plugin for Funambol||http://www.fsf.org/licensing/licenses/agpl-3.0.html AGPLv3 |- |[iCal4p]||A thin wrapper around ical4j for [http://www.processing.org/ processing]||http://www.opensource.org/licenses/lgpl-license.php GNU LGPL |- |[Scalix]||Linux email, calendaring and messaging||http://www.scalix.com/community/opensource/licensing.php SPL |- |[Android CalendarIcsAdapter]||Im- and export between ics file and android calendar||http://www.opensource.org/licenses/gpl-license.php GPL |- |}</p>"},{"location":"properties/","title":"iCalendar Properties","text":"<p>In the iCalendar specification properties are used to define features of iCalendar objects or components embedded within them (e.g. <code>VEVENT</code>, <code>VTIMEZONE</code>, etc.).</p>"},{"location":"properties/#mutable-by-default","title":"Mutable by default","text":"<p>Properties in iCal4j are mutable, so you should be careful not to share them between objects and components.</p> <pre><code>DtStart start = new DtStart(\"20251225\");\nVEvent christmas = new VEvent(\"Christmas Day\").add(start);\n\n## AVOID THIS!!\nstart.setValue(\"20260101\");\nVEvent newYear = new VEvent(\"New Years Day\").add(start);\n\n## THIS IS OK.\nstart = new DtStart(\"20251226\");\nVEvent boxingDay = new VEvent(\"Boxing Day\").add(start);\n</code></pre>"},{"location":"properties/#immutable-instances","title":"Immutable instances","text":"<p>There are some exceptions where sharing properties is safe, when they are defined as immutable instances. These represent properties defined by the specification with no variable elements (e.g. <code>VERSION</code>, <code>CALSCALE</code>, <code>METHOD</code>, etc.).</p> <pre><code>VEvent event1 = new VEvent(\"Meeting 1\").add(ImmutableTransp.OPAQUE)\n        .add(ImmutableClazz.PRIVATE);\nVEvent event2 = new VEvent(\"Meeting 2\").add(ImmutableTransp.OPAQUE)\n        .add(ImmutableClazz.PRIVATE);\n</code></pre>"},{"location":"properties/#equality","title":"Equality","text":"<p>Two property instances are considered equal if they share the same name, value and list of parameters.</p>"},{"location":"properties/#factory","title":"Factory","text":"<p>Each property type defines a factory that may be used for creating new instances. Where the factory differs from typical constructor usage is that constant immutable instances will be returned where applicable.</p> <pre><code>new Clazz.Factory().createProperty(new ParameterList(), \"PUBLIC\") == ImmutableClazz.PUBLIC\n</code></pre>"},{"location":"properties/#immutable-collections","title":"Immutable Collections","text":"<p>In iCal4j we use specific collection implementations to improve support for functional programming. The <code>PropertyList</code> is one such implementation that will return a new collection instance when applying mutator operations.</p> <pre><code>PropertyList list1 = new PropertyList();\nPropertyList list2 = list1.add(new DtStamp());\n// list2 != list1\n</code></pre> <p>Where an operation does not result in any change, the original instance is returned.</p> <pre><code>PropertyList list3 = list2.remove(ImmutableClazz.PRIVATE);\n// list3 == list2\n</code></pre>"},{"location":"query/","title":"iCal4j Query","text":"<p>Query iCalendar data using iCal4j filter expressions.</p>"},{"location":"query/#command-line-usage","title":"Command line usage","text":""},{"location":"query/#find-boxing-day-in-a-collection-of-public-holidays","title":"Find Boxing Day in a collection of public holidays","text":"<pre><code>ical4j-query/bin/ical4j-query calendar-collection -F ./Australian32Holidays.ics -X summary=\"Boxing Day\"\n</code></pre> <p>Result:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VEVENT\nUID:D41666AF-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Boxing Day\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=12\nDTSTART;VALUE=DATE:20021226\nDTEND;VALUE=DATE:20021227\nEND:VEVENT\nEND:VCALENDAR\n</code></pre>"},{"location":"recurrences/","title":"iCal4j Recurrence Support","text":"<p>Events that occur more than once are supported in the iCalendar specification, and are defined by either a sequence of dates (RDATE) or a recurrence rule (RRULE).</p>"},{"location":"recurrences/#recurrence-rrule-examples","title":"Recurrence (RRULE) Examples","text":"<p>Below are some examples of how to represent recurring events using the RRULE format:</p> <ul> <li>A rule occurring on the third Sunday of April would be as follows: </li> </ul> <p><code>RRULE:FREQ=YEARLY;BYMONTH=4;BYDAY=SU;BYSETPOS=3</code></p> <ul> <li>An event occurring on the first and second Monday of October would be specified by the rule: </li> </ul> <p><code>RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=MO;BYSETPOS=1,2</code></p> <ul> <li>Event that repeats monthly: every 29th of every other month!</li> </ul> <p><code>RRULE:FREQ=MONTHLY;INTERVAL=2;BYMONTHDAY=29</code></p> <p>NOTE: As February does not have 29 days in non-leap years, this rule would potentially have a gap between December of the previous year and April of the current year. For this reason it makes more sense to use negative SETPOS values when you need to specify the end of a month.</p> <ul> <li>Event that repeats monthly: every last Sunday of every 3 months </li> </ul> <p><code>RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=-1</code></p> <ul> <li>Event that repeats monthly: every fourth Sunday of every 3 months</li> </ul> <p><code>RRULE:FREQ=MONTHLY;INTERVAL=3;BYDAY=SU;BYSETPOS=4</code></p> <ul> <li>Event that repeats yearly: every 5th of February:</li> </ul> <p><code>RRULE:FREQ=YEARLY;BYMONTH=2;BYDAY=5</code></p>"},{"location":"resources/","title":"iCal4j Resources","text":"<ul> <li>Project Sources</li> <li>API Documentation</li> <li>Support Forums</li> <li>License</li> </ul>"},{"location":"resources/#downloads","title":"Downloads","text":"<p>iCal4j libraries are published via Maven Central. Additional packages are also available to download as specified below.</p> <ul> <li>Maven Central - org.mnode.ical4j</li> <li>Maven Central - org.ical4j</li> <li>Release Notes</li> <li>Snapshot Builds</li> <li>iCal4j Files</li> </ul>"},{"location":"resources/#getting-started","title":"Getting Started","text":"<ul> <li>[Slides] from a recent presentation at the http://calconnect.org CalConnect Roundtable XIV.</li> </ul>"},{"location":"resources/#resources","title":"Resources","text":"<ul> <li> <p>Information regarding code coverage and other project reports is available in the Project Documentation.</p> </li> <li> <p>For information regarding specification support, please see the [Compliance]]([Compliance|RFC) page.</p> </li> <li> <p>Outstanding [Bugs] and https://sourceforge.net/tracker2/?group_id=107024&amp;atid=646397 Patches</p> </li> </ul>"},{"location":"resources/#related-sites-and-articles","title":"Related Sites and Articles","text":"<ul> <li>[User Agents]]([CUAs|Calendar) supporting the iCalendar specification</li> <li>[[Projects]] using iCal4j</li> <li>iCalendar feeds using iCal4j</li> <li>Integrate your Java agenda and iCalendar clients (Outlook) with iCal4j</li> <li>[Wikipedia] on http://en.wikipedia.org/wiki/ICalendar iCalendar.</li> <li>iCalendar to XML conversion using ical4j</li> <li>MSDN iCalendar Extensions</li> </ul>"},{"location":"rfcs/","title":"Supported specifications","text":"<p>This page outlines iCalendar specifications supported by iCal4j.</p>"},{"location":"rfcs/#overview","title":"Overview","text":"<p>iCalendar is a collection of specifications that define a set of rules and data formats to be implemented by a Calendar User Agent (CUA). Implementation of these specifications should provide a CUA with the ability to interact with other CUAs via calendaring and scheduling workflows.</p>"},{"location":"rfcs/#references","title":"References","text":"<ul> <li>RFC4791 - Calendaring Extensions to WebDAV (CalDAV)</li> <li>RFC5545 - Internet Calendaring and Scheduling Core Object Specification (iCalendar)</li> <li>RFC5546 - iCalendar Transport-Independent Interoperability Protocol (iTIP)</li> <li>RFC6047 - iCalendar Message-Based Interoperability Protocol (iMIP)</li> <li>RFC6321 - xCal: The XML Format for iCalendar</li> <li>RFC6350 - vCard Format Specification</li> <li>RFC6351 - xCard: vCard XML Representation</li> <li>RFC6352 - CardDAV: vCard Extensions to Web Distributed Authoring and Versioning (WebDAV)</li> <li>RFC6473 - vCard KIND:application</li> <li>RFC6474 - vCard Format Extensions: Place of Birth, Place and Date of Death</li> <li>RFC6868 - Parameter Value Encoding in iCalendar and vCard</li> <li>RFC6869 - vCard KIND:device</li> <li>RFC7095 - jCard: The JSON Format for vCard</li> <li>RFC7265 - jCal: The JSON Format for iCalendar</li> <li>RFC7953 - Calendar Availability</li> <li>RFC7986 - New Properties for iCalendar</li> <li>RFC7529 - Non-Gregorian Recurrence Rules in iCalendar</li> <li>RFC8984 - JSCalendar: A JSON Representation of Calendar Data</li> <li>RFC9073 - Event Publishing Extensions to iCalendar</li> <li>RFC9074 - \"VALARM\" Extensions for iCalendar</li> <li>RFC9253 - Support for iCalendar Relationships</li> </ul>"},{"location":"roadmap/","title":"iCal4j Roadmap","text":"<p>This roadmap outlines the proposed release intentions for iCal4j. This roadmap is subject to change - frequently! :)</p> <ul> <li> <p>1.0 - Full support for the RFC2445 (iCalendar) specification. Supports Java 1.4.2 and later.</p> </li> <li> <p>1.1 - Full support for the RFC2446 (iTIP) specification. Supports Java 1.4.2 and later.</p> </li> <li> <p>2.0 - Full support for the RFC2447 (iMIP) specification. Supports Java 5 and later.</p> </li> </ul>"},{"location":"timezones/","title":"iCal4j TimeZone Support","text":"<p>iCal4j provides it's own TimeZone implementation as opposed to using the default Java timezone implementation. This is to ensure that all timezones in iCal4j can be accurately represented using a VTIMEZONE component in calendar data.</p> <p>The iCal4j timezone is essentially an implementation of <code>java.util.TimeZone</code> that is backed by a <code>net.fortuna.ical4j.component.VTimeZone</code> instance. Whilst a timezone instance may be created explicitly, typical usage is to obtain a TimeZoneRegistry instance and retrieve the timezone instance from the registry.</p>"},{"location":"timezones/#timezoneregistry","title":"TimeZoneRegistry","text":"<p>The iCal4j TimeZoneRegistry is a repository for instance of <code>net.fortuna.ical4j.model.TimeZone</code>, which are essentially implementations of <code>java.util.TimeZone</code> that are backed by a VTIMEZONE definition. The registry concept allows for the use of a different set of timezone definitions depending on the situation.</p> <p>A custom TimeZoneRegistry implementation may also be provided to replace the default implementation. This may be required in situations where you maintain a common set of timezone definitions in a database or some other backing store. To specify an alternate implementation you need to implement a TimeZoneRegistryFactory and specify it via the following system property:</p> <pre><code>net.fortuna.ical4j.timezone.registry=&lt;custom_factory_classname&gt;\n</code></pre>"},{"location":"timezones/#loading-registry-data","title":"Loading registry data","text":"<p>To access timezone information provided in calendar form, you must first initialise a timezone registry with the data provided. This initialisation process is performed automatically when using the <code>net.fortuna.ical4j.data.CalendarBuilder</code> to load calendar data, such that obtaining an initialised registry is quite simple:</p> <pre><code>CalendarBuilder builder = new CalendarBuilder();\nCalendar calendar = builder.build(new FileInputStream(\"mycalendar.ics\"));\n\nTimeZoneRegistry registry = builder.getRegistry();\n</code></pre> <p>TimeZone data is then retrievable as follows:</p> <pre><code>TimeZone tz = registry.getTimeZone(\"Australia/Melbourne\");\n</code></pre> <p>NOTE: If a timezone with the specified identifier is not available in the registry instance an attempt is made to load a timezone from the default ZoneInfo data included with iCal4j.</p>"},{"location":"timezones/#referencing-the-default-registry","title":"Referencing the default registry","text":"<p>In scenarios where you need to generate new iCalendar data and are required to explicitly specify timezone information you would need a reference to the default timezone registry. You do this by creating a new registry instance, but not loading any timezone data as follows:</p> <pre><code>TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();\n</code></pre> <p>To add a VTimeZone definition to your calendar you would do something like this:</p> <pre><code>VTimeZone tz = registry.getTimeZone(\"Australia/Melbourne\").getVTimeZone();\ncalendar.getComponents().add(tz);\n</code></pre>"},{"location":"timezones/#zoneinfo","title":"ZoneInfo","text":"<p>iCal4j includes a set of timezone definitions based on the latest [Olson database] http://en.wikipedia.org/wiki/Zoneinfo ZoneInfo data. These definitions are used by iCal4j for both interpreting calendar data that does not explicitly specify timezone information, and to include timezone information when generating new calendar data. Note that if a timezone is provided in the calendar data it will always take precedence over the built-in definitions.</p> <p>Four different sets of timezone data are provided as follows:</p> <ul> <li>etc/zoneinfo - timezone data that uses common timezone identifiers (e.g. \"Australia/Melbourne\") (default)</li> <li>etc/zoneinfo-outlook - timezone data that is compatible with MS Outlook, and uses common timezone identifiers</li> <li>etc/zoneinfo-global - timezone data that uses globally-unique timezone identifiers (e.g. \"/ical4j_1_0/Australia/Melbourne\")</li> <li>etc/zoneinfo-outlook-global - timezone data that is compatible with MS Outlook, and uses globally-unique timezone identifiers</li> </ul> <p>To use a zoneinfo set other than the default you will need to create a TimeZoneRegistryImpl instance as follows:</p> <pre><code>TimeZoneRegistry registry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\")\n</code></pre>"},{"location":"timezones/#tzurl","title":"TzUrl","text":"<p>These timezone definitions are generated using tzurl - a fork of the vzic tool that now appears to be inactive (?).</p> <p>iCal4j includes support for automatically updating the included timezone definitions from the tzurl.org site. By default, this feature is disabled to avoid instability for  applications without Internet access, but is easily enabled by specifying the following directive in the ical4j.properties file or as a System property:</p> <pre><code>net.fortuna.ical4j.timezone.update.enabled=true\n</code></pre> <p>NOTE: It is recommended that you create a custom TimeZoneRegistryFactory, as described above, to create such a TimeZoneRegistryImpl instance</p>"},{"location":"timezones/#creating-events-with-timezones","title":"Creating events with timezones","text":"<p>When creating Events, make sure, that you properly set the time zone within the DateTime object:</p> <pre><code>TimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();\nTimeZone timezone = registry.getTimeZone(\"Europe/Berlin\");\nVTimeZone tz = timezone.getVTimeZone();\n[..]\nDateTime start = new DateTime(startDate, timezone);\nDateTime end = new DateTime(endDate, timezone);\nVEvent meeting = new VEvent(start, end, \"text\");\n</code></pre>"},{"location":"transformations/","title":"iCal4j Transformations","text":"<p>Transformations encapsulate logic that may be applied to modify iCal4j model objects for compliance, expansion, response handling, etc.</p>"},{"location":"tzurl/","title":"TZURL.org","text":"<p>TZURL.org is a public site hosting TimeZone information in iCalendar format.</p>"},{"location":"tzurl/#overview","title":"Overview","text":"<p>TBD.</p>"},{"location":"validation/","title":"iCal4j Validation","text":"<p>iCal4j includes a comprehensive validation framework for checking compliance with the various iCalendar specifications. This framework may also be used to implement custom validation rules to support data validation for specific use-cases.</p> <p></p>"},{"location":"validation/#overview","title":"Overview","text":"<p>The iCal4j Validation framework is based on the concept of apply a collection of validation rules to a target iCalendar object and capturing the results of these rules.</p>"},{"location":"validation/#validation-rule","title":"Validation Rule","text":"<p>A validation rule defines a set of constraints to apply when validating a target, and reporting constructs if the target does not meet those constraints.</p> <ul> <li>Validation Type - collection or predicate-based check of target, including a description used for reporting</li> <li>Instances - zero or more inputs to validation checks</li> <li>Severity - reporting severity when a check fails (e.g. Warning, Error, etc.)</li> </ul>"},{"location":"validation/#validation-ruleset","title":"Validation RuleSet","text":"<p>A rule set combines a group of rules and a context in which to apply them. You may have different rules for Calendar properties, components, and properties nested within each component.</p> <ul> <li>Rules - a set of validation rules to apply to the context target</li> <li>Context - a target context provides an identifier for the target type used for reporting</li> </ul>"},{"location":"validation/#validation-entry","title":"Validation Entry","text":"<p>A validation entry is used to report the result of a validation check, where validation rule requirements are not met.</p> <ul> <li>Message - a message reporting the nature of the failure</li> <li>Severity - records the severity of the validation check failure</li> <li>Context - captures the context of the validation check</li> </ul>"},{"location":"validation/#validation-result","title":"Validation Result","text":"<p>A validation result collates validation entries from a target validation, which may include application of one or more validation rule sets. Results may be used to summarise or take action based on the validation outcome.</p> <ul> <li>Entries - a list of validation entries resulting from a target validation</li> <li>...</li> </ul>"},{"location":"validation/#validator","title":"Validator","text":"<p>A validator is a concrete implementation that encapsulates rule sets applied to a specific target type.</p> <ul> <li>Rule sets - a collection of rule sets to apply to the target</li> <li>...</li> </ul>"},{"location":"zoneinfo-outlook/","title":"iCal4j ZoneInfo Outlook","text":"<p>iCal4j ZoneInfo Outlook provides alternate timezone definitions that may provide greater compatibility with certain versions of Microsoft Outlook.</p>"},{"location":"zoneinfo-outlook/#usage","title":"Usage","text":"<p>To use the alternate timezone definitions you may create a custom TimeZoneRegistry instance using the applicable prefix:</p> <pre><code>CalendarParser parser = CalendarParserFactory.getInstance().createParser();\n\nPropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry();\npropertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY);\npropertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY);\n\nParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry();\n\nTimeZoneRegistry tzRegistry = new TimeZoneRegistryImpl(\"zoneinfo-outlook/\");\n\nbuilder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry);\n</code></pre> <p>A convenient factory for the Outlook-compatible definitions is also provided, so in such cases all you need to do is add the following property to your ical4j.properties included in your classpath:</p> <pre><code>net.fortuna.ical4j.timezone.registry=net.fortuna.ical4j.zoneinfo.outlook.OutlookTimeZoneRegistryFactory\n</code></pre>"},{"location":"zoneinfo-outlook/#minimum-requirements","title":"Minimum requirements","text":"<p>None.</p>"},{"location":"zoneinfo-outlook/#project-information","title":"Project Information","text":"<ul> <li>Project Home</li> <li>Javadocs</li> </ul>"},{"location":"zoneinfo-outlook/#download","title":"Download","text":"<ul> <li>Releases</li> </ul>"},{"location":"command/","title":"iCal4j Command Line","text":"<p>A command framework for managing iCalendar and vCard data.</p> <p>Download</p>"},{"location":"command/#overview","title":"Overview","text":"<p>iCal4j Command is a framework that implements common actions and transformations with respect to iCalendar and vCard data. A command line tool is included that allows you to experiment with commands and integrate with your existing processes and workflows.</p>"},{"location":"command/#command-line-usage","title":"Command Line Usage","text":""},{"location":"command/#publish-a-collection-of-events","title":"Publish a collection of events","text":"<pre><code>ical4j/bin/ical4j publish -F ./Australian32Holidays.ics\n</code></pre> <p>Result:</p> <pre><code>BEGIN:VCALENDAR\nPRODID:iCal4j User Agent\nVERSION:2.0\nMETHOD:PUBLISH\nBEGIN:VEVENT\nUID:D416469E-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Australia Day\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=1\nDTSTART;VALUE=DATE:20020126\nDTEND;VALUE=DATE:20020127\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D4164CA4-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Good Friday\nDTSTART;VALUE=DATE:20020329\nDTEND;VALUE=DATE:20020330\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D416509A-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Easter Monday\nDTSTART;VALUE=DATE:20020401\nDTEND;VALUE=DATE:20020402\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41654CC-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:ANZAC Day\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=4\nDTSTART;VALUE=DATE:20020425\nDTEND;VALUE=DATE:20020426\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41658EB-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Queen's Birthday\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=6\nDTSTART;VALUE=DATE:20020610\nDTEND;VALUE=DATE:20020611\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41661F7-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Christmas\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=12\nDTSTART;VALUE=DATE:20021225\nDTEND;VALUE=DATE:20021226\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41666AF-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Boxing Day\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=12\nDTSTART;VALUE=DATE:20021226\nDTEND;VALUE=DATE:20021227\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D4166AA4-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Good Friday\nDTSTART;VALUE=DATE:20030418\nDTEND;VALUE=DATE:20030419\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D4166EA4-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094459Z\nSUMMARY:Easter Monday\nDTSTART;VALUE=DATE:20030421\nDTEND;VALUE=DATE:20030422\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41658EB-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094500Z\nRECURRENCE-ID;TZID=Asia/Hong_Kong:20030610T000000\nDTSTART;VALUE=DATE:20030609\nDTEND;VALUE=DATE:20030610\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nBEGIN:VEVENT\nUID:D41672C8-C414-11D6-BA97-003065F198AC\nDTSTAMP:20020906T094500Z\nSUMMARY:New Year\nRRULE:FREQ=YEARLY;INTERVAL=1;BYMONTH=1\nDTSTART;VALUE=DATE:20020101\nDTEND;VALUE=DATE:20020102\nORGANIZER:johnd@example.com\nSEQUENCE:0\nEND:VEVENT\nEND:VCALENDAR\n</code></pre>"},{"location":"command/calendar/","title":"iCal4j Command - Calendar","text":"<p>Calendar commands are used to parse, transform and validate existing iCalendar data.</p>"},{"location":"command/calendar/#validate-object","title":"Validate Object","text":""},{"location":"command/calendar/#generate-validation-report","title":"Generate validation report","text":"<pre><code>ical4j calendar validate -file ./OZMovies.ics\n</code></pre> <p>Result:</p> <pre><code>- ERROR: VCALENDAR - If one is present, ALL others MUST NOT be present: VEVENT,VFREEBUSY,VTODO,VJOURNAL\n</code></pre>"},{"location":"command/calendar/#serialize-object","title":"Serialize Object","text":"<p>TBD.</p>"},{"location":"command/calendar/#filter-components","title":"Filter Components","text":"<p>TBD.</p>"},{"location":"command/calendar/#replace-component-uids","title":"Replace Component UIDs","text":"<p>TBD.</p>"},{"location":"command/calendar/#freebusy-report","title":"Free/Busy Report","text":"<p>TBD.</p>"},{"location":"command/card/","title":"iCal4j Command - Card","text":"<p>Card commands are used to parse, transform and validate existing vCard data.</p>"},{"location":"command/channel/","title":"iCal4j Command - Channel","text":"<p>Channel commands interact with configured channels to send or receive iCalendar and vCard data.</p>"},{"location":"command/channel/#publish-content","title":"Publish Content","text":"<p>TBD.</p>"},{"location":"command/channel/#poll-content","title":"Poll Content","text":"<p>TBD.</p>"},{"location":"command/collection/","title":"iCal4j Command - Collection","text":"<p>Collection commands interact with configured collections to create, update, retrieve, etc. iCalendar and vCard data.</p>"},{"location":"command/collection/#add-content","title":"Add Content","text":"<p>TBD.</p>"},{"location":"command/collection/#remove-content","title":"Remove Content","text":"<p>TBD.</p>"},{"location":"command/collection/#export-content","title":"Export Content","text":"<p>TBD.</p>"},{"location":"command/itip/","title":"iCal4j Command - iTIP","text":"<p>iTIP commands relate to the iCalendar Transport-Independent Interoperability Protocol (iTIP).</p>"},{"location":"command/itip/#publish-object","title":"Publish Object","text":"<p>TBD.</p>"},{"location":"command/itip/#request-participation","title":"Request Participation","text":"<p>TBD.</p>"},{"location":"command/itip/#participation-reply","title":"Participation Reply","text":"<p>TBD.</p>"},{"location":"command/itip/#add-object-instances","title":"Add Object Instances","text":"<p>TBD.</p>"},{"location":"command/itip/#cancel-object-instances","title":"Cancel Object Instances","text":"<p>TBD.</p>"},{"location":"command/itip/#object-refresh","title":"Object Refresh","text":"<p>TBD.</p>"},{"location":"command/itip/#counter-proposal","title":"Counter Proposal","text":"<p>TBD&gt;</p>"},{"location":"command/itip/#decline-counter-proposal","title":"Decline Counter Proposal","text":"<p>TBD.</p>"},{"location":"command/store/","title":"iCal4j Command - Store","text":"<p>Store commands interact with configured store to create, update, etc. iCalendar and vCard collections.</p>"},{"location":"command/store/#create-collection","title":"Create Collection","text":"<p>TBD.</p>"},{"location":"command/store/#update-collection","title":"Update Collection","text":"<p>TBD.</p>"},{"location":"command/store/#delete-collection","title":"Delete Collection","text":"<p>TBD.</p>"},{"location":"command/store/#export-collection","title":"Export Collection","text":"<p>TBD.</p>"},{"location":"command/template/","title":"iCal4j Command - Template","text":"<p>Template commands are used to generate iCalendar and vCard data from predefined blueprints.</p>"},{"location":"connector/","title":"iCal4j Connector","text":"<p>iCal4j Connector is a tool that helps you manage iCalendar and vCard collections.</p> <p></p>"},{"location":"connector/#overview","title":"Overview","text":"<p>The connector includes multiple interfaces for interacting with collections of iCalendar and vCard data. A command line interface allows you to create, query and manipulate collections of data and output to mutliple formats for tool chaining support. The REST API uses the same underlying command pattern for the CLI to expose  similar functions to HTTP-enabled clients. And the Java API provides support for the implementation of pluggable backends for integration with both standard and customized data sources using the same interface.</p>"},{"location":"connector/#command-line-interface","title":"Command-line Interface","text":"<p>TBD.</p>"},{"location":"connector/#rest-api","title":"REST API","text":"<p>TBD.</p>"},{"location":"connector/#java-api","title":"Java API","text":"<p>TBD.</p>"},{"location":"connector/#download","title":"Download","text":"<p>TBD.</p>"},{"location":"connector/#references","title":"References","text":"<ul> <li>CalDAV Home</li> <li>RFC4791 - Calendaring Extensions to WebDAV (CalDAV)</li> <li>CardDAV Wiki</li> <li>draft-ietf-vcarddav-carddav-01 - vCard Extensions to WebDAV (CardDAV)</li> <li>caldav4j</li> <li>Comparison of CalDAV and CardDAV implementations</li> </ul>"},{"location":"connector/dav/","title":"iCal4j Connector - CalDAV/CardDAV","text":"<p>TBD.</p>"},{"location":"connector/local/","title":"iCal4j Connector - Local","text":"<p>Support for local filesystem storage of iCalendar and vCard objects.</p>"},{"location":"examples/","title":"iCal4j Examples","text":"<p>This page provides examples that demonstrate how to use iCal4j effectively.</p> <ul> <li>Parsing iCalendar Files</li> <li>Building iCal4j Model</li> <li>Generating Output</li> <li>Calculating Recurrences</li> <li>Filtering Components</li> <li>VCard Model</li> </ul>"},{"location":"examples/filter/","title":"iCal4j Examples - Filtering","text":"<p>This page provides examples of using iCal4j to filter iCal4j objects.</p>"},{"location":"examples/filter/#filtering-events","title":"Filtering events","text":"<p>The correct way to filter events according to the spec (RFC2445) would be to construct a VFREEBUSY request that represents the properties of events that you are interested in. You would then pass this request as an argument to the constructor of a new VFREEBUSY, along with the list of components (events) you want to inspect to derive a VFREEBUSY instance that represents the consumed/free time based on the specified events (see the API Documentation for more information).</p> <p>If instead you would like to identify specific events occurring within a time frame, you can use iCal4j filters to filter components within a specified period. For example, to filter a list of events only occurring today you might do the following:</p> <pre><code>java.util.Calendar today = java.util.Calendar.getInstance();\ntoday.set(java.util.Calendar.HOUR_OF_DAY, 0);\ntoday.clear(java.util.Calendar.MINUTE);\ntoday.clear(java.util.Calendar.SECOND);\n\n// create a period starting now with a duration of one (1) day..\nPeriod period = new Period(new DateTime(today.getTime()), new Dur(1, 0, 0, 0));\nFilter filter = new Filter(new PeriodRule(period));\n\nList eventsToday = filter.filter(calendar.getComponents(Component.VEVENT));\n</code></pre>"},{"location":"examples/model/","title":"iCal4j Examples - Model","text":"<p>This page provides examples of using the iCal4j model to build iCalendar objects.</p>"},{"location":"examples/model/#creating-a-new-calendar","title":"Creating a new calendar","text":"<pre><code>Calendar calendar = new Calendar();\ncalendar.add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\"));\ncalendar.add(ImmutableVersion.VERSION_2_0);\ncalendar.add(ImmutableCalScale.GREGORIAN);\n\n// Add events, etc..\ncalendar.add(...);\n</code></pre> <p>Output:</p> <pre><code>BEGIN:VCALENDAR\nPRODID:-//Ben Fortuna//iCal4j 1.0//EN\nVERSION:2.0\nCALSCALE:GREGORIAN\nEND:VCALENDAR\n</code></pre>"},{"location":"examples/model/#creating-a-calendar-with-the-fluent-api","title":"Creating a calendar with the fluent API","text":"<p>The recent addition of a fluent API means we can also write the above example more succinctly:</p> <pre><code>Calendar calendar = new Calendar().withProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\")\n    .withDefaults().getFluentTarget();\n\n// Add events, etc..\ncalendar = calendar.withComponent(...).getFluentTarget();\n</code></pre>"},{"location":"examples/model/#creating-an-all-day-event","title":"Creating an all day event","text":"<pre><code>java.util.Calendar calendar = java.util.Calendar.getInstance();\ncalendar.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER);\ncalendar.set(java.util.Calendar.DAY_OF_MONTH, 25);\n\n// initialise as an all-day event..\nVEvent christmas = new VEvent(new Date(calendar.getTime()), \"Christmas Day\");\n\n// Generate a UID for the event..\nUidGenerator ug = new UidGenerator(\"1\");\nchristmas.add(ug.generateUid());\n\nnet.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar();\ncal.add(christmas);\n</code></pre> <p>Using fluent API:</p> <pre><code>...\n\nnet.fortuna.ical4j.model.Calendar cal = new net.fortuna.ical4j.model.Calendar()\n    .withComponent(\n        new VEvent(new Date(calendar.getTime()), \"Christmas Day\")\n            .withProperty(ug.generateUid()).getFluentTarget()).getFluentTarget();\n</code></pre> <p>Output:</p> <pre><code>BEGIN:VEVENT\nDTSTAMP:20050222T044240Z\nDTSTART;VALUE=DATE:20051225\nSUMMARY:Christmas Day\nUID:20050222T044240Z-1@example.com\nEND:VEVENT\n</code></pre>"},{"location":"examples/model/#creating-a-meeting-of-four-hour-duration","title":"Creating a meeting of four hour duration","text":"<pre><code>// Create a TimeZone\nTimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();\nTimeZone timezone = registry.getTimeZone(\"America/Mexico_City\");\nVTimeZone tz = timezone.getVTimeZone();\n\n // Start Date is on: April 1, 2008, 9:00 am\njava.util.Calendar startDate = new GregorianCalendar();\nstartDate.setTimeZone(timezone);\nstartDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL);\nstartDate.set(java.util.Calendar.DAY_OF_MONTH, 1);\nstartDate.set(java.util.Calendar.YEAR, 2008);\nstartDate.set(java.util.Calendar.HOUR_OF_DAY, 9);\nstartDate.set(java.util.Calendar.MINUTE, 0);\nstartDate.set(java.util.Calendar.SECOND, 0);\n\n // End Date is on: April 1, 2008, 13:00\njava.util.Calendar endDate = new GregorianCalendar();\nendDate.setTimeZone(timezone);\nendDate.set(java.util.Calendar.MONTH, java.util.Calendar.APRIL);\nendDate.set(java.util.Calendar.DAY_OF_MONTH, 1);\nendDate.set(java.util.Calendar.YEAR, 2008);\nendDate.set(java.util.Calendar.HOUR_OF_DAY, 13);\nendDate.set(java.util.Calendar.MINUTE, 0);  \nendDate.set(java.util.Calendar.SECOND, 0);\n\n// Create the event\nString eventName = \"Progress Meeting\";\nDateTime start = new DateTime(startDate.getTime());\nDateTime end = new DateTime(endDate.getTime());\nVEvent meeting = new VEvent(start, end, eventName);\n\n// add timezone info..\nmeeting.add(tz.getTimeZoneId());\n\n// generate unique identifier..\nUidGenerator ug = new UidGenerator(\"uidGen\");\nUid uid = ug.generateUid();\nmeeting.add(uid);\n\n// add attendees..\nAttendee dev1 = new Attendee(URI.create(\"mailto:dev1@mycompany.com\"));\ndev1.add(Role.REQ_PARTICIPANT);\ndev1.add(new Cn(\"Developer 1\"));\nmeeting.add(dev1);\n\nAttendee dev2 = new Attendee(URI.create(\"mailto:dev2@mycompany.com\"));\ndev2.add(Role.OPT_PARTICIPANT);\ndev2.add(new Cn(\"Developer 2\"));\nmeeting.add(dev2);\n\n// Create a calendar\nnet.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar();\nicsCalendar.add(new ProdId(\"-//Events Calendar//iCal4j 1.0//EN\"));\nicsCalendar.add(ImmutableCalScale.GREGORIAN);\n\n\n// Add the event and print\nicsCalendar.add(meeting);\nSystem.out.println(icsCalendar);\n</code></pre> <p>Using the fluent API:</p> <pre><code>...\n\nVEvent meeting = new VEvent(start, end, eventName)\n    .withProperty(tz.getTimeZoneId())\n    .withProperty(ug.generateUid())\n    .withProperty(\n        new Attendee(URI.create(\"mailto:dev1@mycompany.com\"))\n            .withParameter(Role.REQ_PARTICIPANT)\n            .withParameter(new Cn(\"Developer 1\").getFluentTarget())\n        .getFluentTarget())\n    .withProperty(\n        new Attendee(URI.create(\"mailto:dev2@mycompany.com\"))\n            .withParameter(Role.OPT_PARTICIPANT)\n            .withParameter(new Cn(\"Developer 2\").getFluentTarget())\n        .getFluentTarget())\n    .getFluentTarget();\n\nnet.fortuna.ical4j.model.Calendar icsCalendar = new net.fortuna.ical4j.model.Calendar()\n    .withProdId(\"-//Events Calendar//iCal4j 1.0//EN\")\n    .withDefaults()\n    .withComponent(meeting)\n    .getFluentTarget();\n\nSystem.out.println(icsCalendar);\n</code></pre>"},{"location":"examples/model/#attaching-binary-data","title":"Attaching binary data","text":"<pre><code>FileInputStream fin = new FileInputStream(\"etc/artwork/logo.png\");\nByteArrayOutputStream bout = new ByteArrayOutputStream();\nfor (int i = fin.read(); i &gt;= 0;) {\n    bout.write(i);\n    i = fin.read();\n}\n\nParameterList params = new ParameterList();\nparams.add(Value.BINARY);\nparams.add(Encoding.BASE64);\n\nAttach attach = new Attach(params, bout.toByteArray());\n</code></pre> <p>Output:</p> <pre><code>ATTACH;ENCODING=BASE64;VALUE=BINARY:iVBORw0KGgoAAAANSUhEUgAAAUYAAACJCAYAA\n ABQHpElAAAABHNCSVQICAgIfAhkiAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ\n 5vuPBoAABPKSURBVHic7d15tFX1dcDx72aQyQkMqAiIojjFASc0GmOlRqKmcR6XpkaJYtrU1\n LYSp0ZZqxo1SZ2CUZPGqlXRGEdAqzKoqGjqCKgoVFF8DkVEBJRh9499HiGXB /ec3/nnN89d\n 3/WOmvx9J599r3vvf3O8Pvtn6gqzrkaiGwPzCw6jTZsjmrLqq9ERgGXFZdOmyajeuCqr0QOB\n ...\n</code></pre>"},{"location":"examples/model/#html-support","title":"HTML Support","text":"<p>Starting with Outlook 2010, Outlook can now recognize HTML formatted content in an iCalendar.</p> <p>Here are the steps to add an alternate description in HTML with ical4j:</p> <ul> <li>Create a ParameterList containing a XParameter(\"FMTTYPE\", \"text/html\").</li> <li>Create a XProperty with name \"X-ALT-DESC\", FMTTYPE parameterList and html.</li> <li>Add the XProperty to your VEvent.</li> </ul> <p>Example code:</p> <pre><code>HostInfo hostInfo = new SimpleHostInfo(\"myHostName\");\nUidGenerator ug = new UidGenerator(hostInfo, \"1\");\nTimeZoneRegistry registry = TimeZoneRegistryFactory.getInstance().createRegistry();\nVTimeZone tz = registry.getTimeZone(\"US/Eastern\").getVTimeZone();\nTzId tzParam = new TzId(tz.getRequiredProperty(Property.TZID).getValue());\n\nCalendar iCalendar = new Calendar().withProdId(\"-//MyCalendarApp v1.0//EN\")\n    .withDefaults().withComponent(tz);\n\n//Outlook uses a custom property to display HTML called the X-ALT-DESC property\n\nParameterList htmlParameters = new ParameterList();\nXParameter fmtTypeParameter = new XParameter(\"FMTTYPE\", \"text/html\");\nhtmlParameters.add(fmtTypeParameter);\n\nDateTime startTime, endTime;\ntry {\n    startTime = new DateTime(\"20171127T150000\");\n    endTime = new DateTime(\"20171127T160000\");\n} catch (ParseException pe) {\n    // yyyymmddTHHmmss is the correct format, but to make the compiler happy...\n    startTime = new DateTime();\n    endTime = startTime;\n}\n\nVEvent vevent = new VEvent(startTime, endTime, \"Scott's Birthday Party\")\n    .withProperty(ug.generateUid())\n    .withProperty(new DtStamp().withParameter(tzParam).getFluentTarget())\n    .withProperty(new DtStart().withParameter(tzParam).getFluentTarget())\n    .withProperty(new DtEnd().withParameter(tzParam).getFluentTarget())\n    .withProperty(new Location(\"Overmountain Shelter on the AT\"))\n    .withProperty(new Description(\"See ya there!\"))\n    .getFluentTarget();\n\nString html = \"&lt;font color=#ff0000&gt;You will this description instead of the text version if you have Outlook!&lt;/font&gt;\";\nXProperty htmlProp = new XProperty(\"X-ALT-DESC\", htmlParameters, html);\nvevent.add(htmlProp);\niCalendar.add(vevent);\n</code></pre>"},{"location":"examples/output/","title":"iCal4j Examples - Output","text":"<p>This page provides examples of using an iCal4j model to generate iCalendar (*.ics) files.</p>"},{"location":"examples/output/#generating-a-calendar-file","title":"Generating a calendar file","text":"<pre><code>FileOutputStream fout = new FileOutputStream(\"mycalendar.ics\");\n\nCalendarOutputter outputter = new CalendarOutputter();\noutputter.output(calendar, fout);\n</code></pre>"},{"location":"examples/parsing/","title":"iCal4j Examples - Parsing","text":"<p>This page provides examples of using iCal4j to parse iCalendar (*.ics) files.</p>"},{"location":"examples/parsing/#parsing-a-calendar-file","title":"Parsing a calendar file","text":"<pre><code>FileInputStream fin = new FileInputStream(\"mycalendar.ics\");\nCalendarBuilder builder = new CalendarBuilder();\nCalendar calendar = builder.build(fin);\n</code></pre>"},{"location":"examples/parsing/#parsing-a-calendar-string","title":"Parsing a calendar string","text":"<pre><code>String myCalendarString = ...\nStringReader sin = new StringReader(myCalendarString);\nCalendarBuilder builder = new CalendarBuilder();\nCalendar calendar = builder.build(sin);\n</code></pre>"},{"location":"examples/recur/","title":"iCal4j Examples - Recurrences","text":"<p>This page provides examples of using iCal4j to calculate recurrences of iCal4j objects.</p>"},{"location":"examples/recur/#generating-event-dates","title":"Generating event dates","text":"<pre><code>// Reading the file and creating the calendar\nCalendarBuilder builder = new CalendarBuilder();\nCalendar cal = null;\ntry {\n    cal = builder.build(new FileInputStream(\"my.ics\"));\n} catch (IOException e) {\n    e.printStackTrace();\n} catch (ParserException e) {\n    e.printStackTrace();\n}\n\n\n// Create the date range which is desired.\nDateTime from = new DateTime(\"20100101T070000Z\");\nDateTime to = new DateTime(\"20100201T070000Z\");;\nPeriod period = new Period(from, to);\n\n\n// For each VEVENT in the ICS\nfor (Object o : cal.getComponents(\"VEVENT\")) {\n    Component c = (Component)o;\n    PeriodList list = c.calculateRecurrenceSet(period);\n\n    for (Object po : list) {\n        System.out.println((Period)po);\n    }\n}\n</code></pre>"},{"location":"extensions/","title":"iCal4j Extensions","text":""},{"location":"extensions/#overview","title":"Overview","text":"<p>iCal4j Extensions is a Java library that provides support for extension (and some non-standard) iCalendar properties and components. This includes support for CalDAV properties, common Calendar User Agents (CUAs) such as Microsoft Outlook, and convenience implementations of components and properties not explicitly defined in the core specifications.</p> <p>This library also defines a collection of strategies, which are opinionated approaches to constructing iCalendar and vCard objects for common use-cases.</p>"},{"location":"extensions/#property-extensions","title":"Property Extensions","text":"<p>The following classes extend standard property implementations whilst maintaining specification compliance.</p> Property Extends Description CompletionStatus PercentComplete Immutable property defining common values for <code>PERCENT-COMPLETE</code> property HtmlDescription StyledDescription Convenience class for managing HTML-formatted <code>STYLED-DESCRIPTION</code> properties MarkdownDescription StyledDescription Convenience class for managing Markdown-formatted <code>STYLED-DESCRIPTION</code> properties Notify Trigger Provides a more intuitive way to define <code>VALARM</code> triggers Repeats RRule Provides a more intuitive way to define recurrence rules for components"},{"location":"extensions/#experimental-properties","title":"Experimental Properties","text":"Name Property Description References CalStart X-CALSTART LicLocation X-LIC-LOCATION WrAlarmId X-WR-ALARMID WrCalDesc X-WR-CALDESC WrCalName X-WR-CALNAME WrRelCalId X-WR-RELCALID WrTimeZone X-WR-TIMEZONE"},{"location":"extensions/#usage","title":"Usage","text":"<p>To add support for extensions you may register the required factories with your CalendarBuilder instance:</p> <pre><code>CalendarParser parser = CalendarParserFactory.getInstance().createParser();\n\nPropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry();\npropertyFactoryRegistry.register(WrTimezone.PROPERTY_NAME, WrTimezone.FACTORY);\npropertyFactoryRegistry.register(WrCalName.PROPERTY_NAME, WrCalName.FACTORY);\n\nParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry();\n\nTimeZoneRegistry tzRegistry = TimeZoneRegistryFactory.getInstance().createRegistry();\n\nbuilder = new CalendarBuilder(parser, propertyFactoryRegistry, parameterFactoryRegistry, tzRegistry);\n</code></pre>"},{"location":"extensions/#minimum-requirements","title":"Minimum requirements","text":"<p>iCal4j Extensions requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver.</p>"},{"location":"extensions/#project-information","title":"Project Information","text":"<ul> <li>Project Home</li> <li>Javadocs</li> </ul>"},{"location":"extensions/#download","title":"Download","text":"<ul> <li>Releases</li> </ul> <p>Traditionally any components, properties and parameters not defined by RFC2445 are classified as non-standard or extension objects. These objects must include the \"X-\" name prefix to be compliant with the specification.</p> <p>In the iCal4j object model, these objects are represented by the XComponent, XProperty and XParameter classes respectively. Names that do not conform to the \"X-\" name prefix requirement may be supported by enabling the following Compatibility Hint:</p> <pre><code>ical4j.parsing.relaxed=true\n</code></pre>"},{"location":"extensions/#extension-factory-registration","title":"Extension Factory Registration","text":"<p>There are a number of deficiences with above approach, most notably that only String values are supported by X{Component|Property|Parameter}, and there is no option for supporting some well-known non-standard objects.</p>"},{"location":"extensions/#propertyfactoryregistry","title":"PropertyFactoryRegistry","text":"<p>You can now add support for extension properties by registering custom PropertyFactory implementations:</p> <pre><code>PropertyFactory somePropertyFactory = ...\n\nPropertyFactoryRegistry propertyFactoryRegistry = new PropertyFactoryRegistry();\npropertyFactoryRegistry.register(somePropertyFactory);\n\nCalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(),\n    ComponentFactory.getInstance(),\n    propertyFactoryRegistry,\n    new ParameterFactoryRegistry(),\n    TimeZoneRegistryFactory.getInstance().createRegistry());\n\nCalendar calendar = builder.build(..);\n</code></pre>"},{"location":"extensions/#parameterfactoryregistry","title":"ParameterFactoryRegistry","text":"<p>Extension parameters are also supported:</p> <pre><code>ParameterFactory someParameterFactory = ...\n\nParameterFactoryRegistry parameterFactoryRegistry = new ParameterFactoryRegistry();\nparameterFactoryRegistry.register(someParameterFactory);\n\nCalendarBuilder builder = new CalendarBuilder(CalendarParserFactory.getInstance().createParser(),\n    ComponentFactory.getInstance(),\n    new PropertyFactoryRegistry(),\n    parameterFactoryRegistry,\n    TimeZoneRegistryFactory.getInstance().createRegistry());\n\nCalendar calendar = builder.build(..);\n</code></pre>"},{"location":"extensions/#common-extensions","title":"Common Extensions","text":"<p>A collection of commonly used iCalendar extension objects are available in the [[Extensions|ical4j-extensions]] sub-project.</p>"},{"location":"extensions/caldav/","title":"iCal4j Extensions - CalDAV","text":"<p>CalDAV is an extension of WebDAV to support persistent storage of iCalendar object data. This specification defines some additional iCalendar properties and parameters that are implemented here.</p>"},{"location":"extensions/caldav/#caldav-properties","title":"CalDAV Properties","text":"Name Description Reference ACKNOWLEDGED ALARM-AGENT CALENDAR-SERVER-ACCESS CALENDAR-SERVER-ATTENDEE-COMMENT CALENDAR-SERVER-PRIVATE-COMMENT DEFAULT-ALARM PROXIMITY"},{"location":"extensions/concept/","title":"iCal4j Extensions - Concept","text":"<p>In iCal4j extensions we provide implementations of <code>CONCEPT</code> values proposed in  Semantic Calendaring.</p>"},{"location":"extensions/outlook/","title":"iCal4j Extensions - Microsoft Outlook","text":"<p>Microsoft Outlook defines some additional iCalendar properties that are used internally to manage additional calendar features.</p> <p>Whilst these properties comply with the extended property naming convention (prefixed with <code>X-</code>), because Outlook is such a pervasive Calendar User Agent (CUA), it seems convenient to define them here.</p>"},{"location":"extensions/outlook/#outlook-properties","title":"Outlook Properties","text":"Name Description Reference ALL-DAY-EVENT BUSY-STATUS IMPORTANCE INST-TYPE ORIGINAL-END ORIGINAL-START"},{"location":"extensions/participant/","title":"iCal4j Extensions - Participant","text":"<p>The <code>PARTICIPANT</code> component provides additional information about actors in events and other collaborative activities. These extensions make it easier to create participant instances.</p>"},{"location":"extensions/concept/","title":"iCal4j Extensions - Concepts","text":"<p>A concept is type definition for iCalendar components used to refine object data for specific scenarios.</p> <p>iCal4j Extensions includes concepts for common use-cases, as outlined in the table below.</p> Concept Component Scheduled Planned Participants (Active) Repeats Event VEVENT Yes Yes Yes Optional Observance VEVENT Yes Yes No Optional Action VTODO No Yes Yes Optional Issue VTODO No No Yes No Request VTODO No No Yes No Note VJOURNAL No No No No Report VJOURNAL Yes Yes No Optional Availability VAVAILABILITY Yes Yes No Optional <ul> <li>Scheduled - occurs on a specific date/time</li> <li>Planned - represents a future activity or target (where not scheduled will typically have a due date)</li> <li>Participants (Active) - requires actors to participate in order to resolve</li> <li>Repeats - represents multiple related activities or targets</li> </ul>"},{"location":"extensions/concept/action/","title":"iCal4j Extensions - Concept: Action","text":"<p>An Action is a planned, unscheduled activity for one or more participants. This concept may be used to represent tasks, work items, and agenda for scheduled events.</p>"},{"location":"extensions/concept/availability/","title":"iCal4j Extensions - Concept: Availability","text":"<p>Availability defines a block of time when a participant or resource is available.</p>"},{"location":"extensions/concept/event/","title":"iCal4j Extensions - Concept: Event","text":"<p>An Event is a planned activity, scheduled in the future for one or more active participants. This may be used to  represent activities such as meetings, appointments, seminars, conferences, etc.</p>"},{"location":"extensions/concept/event/#event-information","title":"Event information","text":"<p>An Event required the following property information:</p> <ul> <li>Informational properties such as summary, (rich) description, attachments, etc.</li> <li>Geographical properties such as location, timezone, etc.</li> <li>Schedule properties such as date (range), time, recurrence rules, etc.</li> <li>Participant properties such as active participants, inactive participants (e.g. watchers), etc.</li> </ul>"},{"location":"extensions/concept/event/#event-occurrences","title":"Event occurrences","text":"<p>For repeating events each occurrence may override properties in the series in order to provide additional/alternative details specific to the occurrence.</p>"},{"location":"extensions/concept/issue/","title":"iCal4j Extensions - Concept: Issue","text":"<p>An Issue represents an unplanned, unscheduled activity for one or more participants. This concept is typically used to report impediments and risks that may be resolved or mitigated by one or more active participants.</p>"},{"location":"extensions/concept/note/","title":"iCal4j Extensions - Concept: Note","text":"<p>A Note is an unplanned record used for informational purposes only.</p>"},{"location":"extensions/concept/observance/","title":"iCal4j Extensions - Concept: Observance","text":"<p>An Observance is a planned event with no active participation, used for informational purposes only.</p>"},{"location":"extensions/concept/report/","title":"iCal4j Extensions - Concept: Report","text":"<p>A Report is a planned record used for informational purposes only.</p>"},{"location":"extensions/concept/request/","title":"iCal4j Extensions - Concept: Request","text":"<p>A Request represents an unplanned, unscheduled activity for one or more participants. This concept is typically used to track  by one or more active participants.</p>"},{"location":"extensions/link/","title":"iCal4j Extensions - Link","text":"<p>In iCal4j extensions we provide implementations of <code>LINK</code> types proposed in Semantic Calendaring.</p>"},{"location":"extensions/strategy/","title":"iCal4j Extensions - Strategy","text":"<p>A strategy is an opinionated formula for populating iCalendar and vCard objects with properties specific to a certain use-case.</p> <p>iCal4j Extensions includes strategies for popular scenarios, such as scheduling meetings or appointments, as well as organizational management strategies for teams and individuals.</p>"},{"location":"extensions/strategy/#strategy-features","title":"Strategy Features","text":"<p>The following tables outline the different features of various strategies, which may help when choosing an appropriate strategy to use.</p>"},{"location":"extensions/strategy/#vevent-strategies","title":"VEvent Strategies","text":"Strategy Participants Transparency Recurring Precision Classification Links Meeting 2+ Opaque Optional Time Private Agenda, Location Appointment 1 Opaque Optional Time Confidential Location Anniversary 1 Transparent Annually Date Public Individual Observance 1 Transparent Required Time Public Location Conference 1+ Transparent No Date Public Organization, Location Performance 1+ Opaque Optional Time Public Agenda, Individual+, Organization, Location Seminar 1+ Opaque Optional Time Public Agenda, Individual+, Organization, Location"},{"location":"extensions/strategy/#vtodo-strategies","title":"VToDo Strategies","text":"Strategy Participants Transparency Recurring Precision Classification Links Task 1+ Opaque Optional Time Private Location, Milestone Action 1 Transparent Optional Date Private Meeting Agenda 1+ Transparent Optional Time Private Issue 1+ Transparent No Date Public Milestone 1+ Transparent Optional Date Public Request 1 Transparent No Time Public Approval 1 Transparent No Time Public Request"},{"location":"extensions/strategy/#vjournal-strategies","title":"VJournal Strategies","text":"Strategy Participants Transparency Recurring Precision Classification Links Note 1+ Transparent No Time Private Attendance 1+ Transparent No Time Public Meeting Decision 1+ Transparent No Date Public Risk 1+ Transparent No Time Public Objective Objective 1+ Transparent Optional Time Public Timesheet 1 Transparent Required Time Public Task"},{"location":"extensions/strategy/#vavailability-strategies","title":"VAvailability Strategies","text":"Strategy Participants Priority Recurring Location Classification Links Office Hours 1 Default Required Optional Public Location Out of Office 1 High No No Public Offer 0 Default No Optional Public Location"},{"location":"extensions/strategy/#vcard-strategies","title":"vCard Strategies","text":"Strategy Structured Name Members Geographic Position Delivery Address Language Links Individual Yes No No Optional Optional Organization Organization No No Yes Optional No Location Team No Yes Optional Optional Optional Individual, Location Location No No Yes No No"},{"location":"extensions/strategy/action/","title":"iCal4j Extensions - Strategy: Action","text":""},{"location":"extensions/strategy/availability/","title":"iCal4j Extensions - Strategy: Availability","text":""},{"location":"extensions/strategy/entity/","title":"iCal4j Extensions - Strategy: Entity","text":"<p>An Entity represents an actor or participant in scheduled activities.</p>"},{"location":"extensions/strategy/entity/#entity-strategies","title":"Entity Strategies","text":"Name Description Individual An identifiable person that may be an active or inactive participant Group A grouping of one or more other Entities Organization Represents a non-person Entity such as a business or department Location A physical place such as a building, office, landmark, etc."},{"location":"extensions/strategy/event/","title":"iCal4j Extensions - Strategy: Event","text":""},{"location":"extensions/strategy/event/#overview","title":"Overview","text":"<p>Event strategies extend on the Event concept tailored for specific use-cases.</p> Strategy Participants Precision Classification Links Meeting 2+ Time Private Agenda, Location Appointment 1 Time Confidential Location Performance 1+ Time Public Agenda, Individual+, Organization, Location Seminar 1+ Time Public Agenda, Individual+, Organization, Location"},{"location":"extensions/strategy/event/#examples","title":"Examples","text":"<p>TBD.</p>"},{"location":"extensions/strategy/group/","title":"iCal4j Extensions - Strategy: Group","text":""},{"location":"extensions/strategy/individual/","title":"iCal4j Extensions - Strategy: Individual","text":""},{"location":"extensions/strategy/issue/","title":"iCal4j Extensions - Strategy: Issue","text":""},{"location":"extensions/strategy/note/","title":"iCal4j Extensions - Strategy: Note","text":""},{"location":"extensions/strategy/observance/","title":"iCal4j Extensions - Strategy: Observance","text":""},{"location":"extensions/strategy/report/","title":"iCal4j Extensions - Strategy: Report","text":""},{"location":"extensions/strategy/request/","title":"iCal4j Extensions - Strategy: Request","text":""},{"location":"graph/","title":"iCal4j Graph","text":"<p>A graph API for traversal of linked objects.</p>"},{"location":"graph/#overview","title":"Overview","text":"<p>iCal4j Graph simplifies navigation between linked iCalendar and vCard objects. Linking is supported via multiple properties in the iCalendar and vCard specifications, and is commonly used to define relationships between entities and events.</p>"},{"location":"integration/","title":"iCal4j Integration","text":"<p>iCal4j Integration provides support for popular calendar message transports and tooling.</p> <p></p>"},{"location":"integration/#overview","title":"Overview","text":"<p>Whilst the iCal4j library provides support for parsing, validating and producing iCalendar data formats, typically a useful application will also need to integrate with messaging and other transports to support interoperability with external systems. </p> <p>Email is the most widely supported transport for calendaring systems, however this library also aims to support integration with other messaging tools and public APIs.</p> <ul> <li>Email - The official iCalendar message transport as defined by the iMiP RFC.</li> <li>Apache Camel - Support for iCalendar and vCard endpoints in Apache Camel</li> <li>AWS SNS, SQS, etc. - Cloud-native messaging support</li> <li>JMS - support for Java messaging</li> </ul>"},{"location":"integration/#reactive-streams","title":"Reactive Streams","text":"<p>iCal4j Integration includes support for Reactive Streams, via the Java 9 implementation.</p>"},{"location":"integration/#apache-camel","title":"Apache Camel","text":"<p>Added the ical4j-integration dependency to your project and configure your routes:</p> <pre><code>from('ical:http://tzurl.org/zoneinfo/Australia/Melbourne')\n.to(\"mock:result\")\n</code></pre>"},{"location":"integration/#references","title":"References","text":"<ul> <li>Project Home</li> <li>Javadocs</li> </ul>"},{"location":"integration/email/","title":"iCal4j Integration - Email","text":"<p>Email is typically used to implement the iCalendar iTIP scheduling specification for sharing and negotiating events such as meetings, etc.</p> <p>iCal4j provides support for both sending and receiving iTIP attachments via email.</p>"},{"location":"integration/email/#receiving-email","title":"Receiving Email","text":"<p>When receiving email this library can be used to generate iCalendar data for a number of different use cases. These are listed below.</p>"},{"location":"integration/email/#extract-itip-attachments","title":"Extract iTIP attachments","text":"<p>The most common scenario is when you receive an event invitation in the form of an iCalendar iTIP email attachment. The <code>iTIPEmailProcessor</code> is used to extract these attachments from a message or folder.</p>"},{"location":"integration/email/#generate-objects-for-individual-messages","title":"Generate objects for individual messages","text":"<p>It is also possible to produce a new message object (i.e. a type of <code>VJOURNAL</code>) by mapping the following message headers to properties:</p> Message Header Type iCalendar Property From Email address ORGANIZER To Email address(es) ATTENDEE Subject String SUMMARY Date DATE-TIME DTSTART Message-Id URI UID <p>In addition the following message parts are also mapped:</p> Content Type iCalendar Property text/plain DESCRIPTION text/html STYLED-DESCRIPTION application/pdf ATTACH"},{"location":"integration/email/#generate-objects-for-mailing-lists","title":"Generate objects for mailing lists","text":"<p>Messages from mailing list can be combined into a single object representing the list. In such cases the same mappings as individual messages are applied, except for the following replacements for Message-Id and Date:</p> Message Header Type iCalendar Property Date DATE-TIME RDATE List-Id URI UID List-URL URI URL/LINK <p>In this way each list message is represented as a separate occurence of the list object.</p>"},{"location":"integration/webhooks/","title":"iCal4j Integration - Webhooks","text":"<p>Webhooks are the provision of endpoints that may be used to post content updates from specific tools and applications.</p> <p>iCal4j provides support for webhooks compatible with specific tools, including:</p> <ul> <li>Zapier</li> <li>IFTT</li> <li>JIRA</li> <li>Confluence</li> <li>...</li> </ul>"},{"location":"integration/websub/","title":"iCal4j Integration - Websub","text":"<p>Websub is a W3C standard for a publish/subscribe pattern online. Subscription is managed via an intermediary Hub, such that when a publisher sends updates to the Hub it is redistributed to subscribers.</p> <p>iCal4j supports publishing content to a Websub Hub, as well as support for a subscriber callback (i.e. a webhook) for consuming Hub content.</p>"},{"location":"integration/xmpp/","title":"iCal4j Integration - XMPP","text":"<p>Instant Messaging protocols such as XMPP provide an opportunity for more interactive sharing of iCalendar data.</p> <p>The use of chat as an alternative user interface (UI) is growing in popularity, with Chatbots and ChatOps becoming more popular.</p> <p>With XMPP integration, new opportunities arise for querying, notifications and coordinating for calendaring and scheduling applications.</p>"},{"location":"serializer/","title":"iCal4j Serializer","text":"<p>Support for serialization of iCalendar objects to and from XML and JSON-based formats.</p>"},{"location":"serializer/#overview","title":"Overview","text":"<p>Serialization support is built upon the Jackson JSON ObjectMapper used to convert Java POJOs to and from JSON (and XML).</p> <p>A number of JSON-based specifications are available for representing iCalendar data, with the following supported in this library:</p> <ul> <li>jCal/jCard</li> <li>jsCalendar/jsCard</li> <li>Schema.org (JSON-LD)</li> </ul>"},{"location":"serializer/#command-line-usage","title":"Command Line Usage","text":""},{"location":"serializer/#serialize-a-calendar-to-default-output-jcal","title":"Serialize a calendar to default output (jCal)","text":"<pre><code>ical4j-serializer/bin/ical4j-serializer calendar -F ./Australian32Holidays.ics\n</code></pre> <p>Result:</p> <pre><code>[\"vcalendar\",[[\"calscale\",{},\"text\",\"GREGORIAN\"],[\"method\",{},\"text\",\"PUBLISH\"],[\"prodid\",{},\"text\",\"-//Apple Computer, Inc//iCal 1.0//EN\"],[\"x-wr-calname\",{\"value\":\"text\"},\"text\",\"Australian Holidays\"],[\"x-wr-relcalid\",{\"value\":\"text\"},\"text\",\"D4167B74-C414-11D6-BA97-003065F198AC\"],[\"x-wr-timezone\",{\"value\":\"text\"},\"text\",\"Asia/Hong_Kong\"],[\"version\",{},\"text\",\"2.0\"]],[[\"vtimezone\",[[\"tzid\",{},\"text\",\"Asia/Hong_Kong\"],[\"last-modified\",{},\"date-time\",\"2006-01-17T16:36:57Z\"]],[[\"standard\",[[\"dtstart\",{},\"date-time\",\"1932-12-13T20:45:52\"],[\"tzoffsetto\",{},\"utc-offset\",\"+08:00\"],[\"tzoffsetfrom\",{},\"utc-offset\",\"Z\"],[\"tzname\",{},\"text\",\"HKT\"]],[]],[\"daylight\",[[\"dtstart\",{},\"date-time\",\"1946-04-20T03:30:00\"],[\"tzoffsetto\",{},\"utc-offset\",\"+09:00\"],[\"tzoffsetfrom\",{},\"utc-offset\",\"+08:00\"],[\"tzname\",{},\"text\",\"HKST\"]],[]],[\"standard\",[[\"dtstart\",{},\"date-time\",\"1946-12-01T03:30:00\"],[\"tzoffsetto\",{},\"utc-offset\",\"+08:00\"],[\"tzoffsetfrom\",{},\"utc-offset\",\"+09:00\"],[\"tzname\",{},\"text\",\"HKT\"]],[]]]],[\"vevent\",[[\"uid\",{},\"text\",\"D416469E-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Australia Day\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=1\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-01-26\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-01-27\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D4164CA4-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Good Friday\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-03-29\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-03-30\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D416509A-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Easter Monday\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-04-01\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-04-02\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41654CC-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"ANZAC Day\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=4\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-04-25\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-04-26\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41658EB-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Queen's Birthday\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=6\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-06-10\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-06-11\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41661F7-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Christmas\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=12\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-12-25\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-12-26\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41666AF-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Boxing Day\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=12\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-12-26\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-12-27\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D4166AA4-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Good Friday\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2003-04-18\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2003-04-19\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D4166EA4-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:44:59Z\"],[\"summary\",{},\"text\",\"Easter Monday\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2003-04-21\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2003-04-22\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41658EB-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:45:00Z\"],[\"recurrence-id\",{\"tzid\":\"asia/hong_kong\"},\"date-time\",\"2003-06-10T00:00:00\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2003-06-09\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2003-06-10\"]],[]],[\"vevent\",[[\"uid\",{},\"text\",\"D41672C8-C414-11D6-BA97-003065F198AC\"],[\"dtstamp\",{},\"date-time\",\"2002-09-06T09:45:00Z\"],[\"summary\",{},\"text\",\"New Year\"],[\"rrule\",{},\"recur\",\"FREQ=YEARLY;INTERVAL=1;BYMONTH=1\"],[\"dtstart\",{\"value\":\"date\"},\"date\",\"2002-01-01\"],[\"dtend\",{\"value\":\"date\"},\"date\",\"2002-01-02\"]],[]]]]\n</code></pre>"},{"location":"serializer/#serialize-a-calendar-to-xml-xcal","title":"Serialize a calendar to XML (xCal)","text":"<pre><code>ical4j-serializer/bin/ical4j-serializer calendar -F ./Australian32Holidays.ics --pretty-print -X XCAL\n</code></pre> <p>Result:</p> <pre><code>&lt;icalendar xmlns=\"urn:ietf:params:xml:ns:icalendar-2.0\"&gt;\n  &lt;vcalendar&gt;\n    &lt;properties&gt;\n      &lt;calscale&gt;\n        &lt;parameters/&gt;\n        &lt;text&gt;GREGORIAN&lt;/text&gt;\n      &lt;/calscale&gt;\n      &lt;method&gt;\n        &lt;parameters/&gt;\n        &lt;text&gt;PUBLISH&lt;/text&gt;\n      &lt;/method&gt;\n      &lt;prodid&gt;\n        &lt;parameters/&gt;\n        &lt;text&gt;-//Apple Computer, Inc//iCal 1.0//EN&lt;/text&gt;\n      &lt;/prodid&gt;\n      &lt;x-wr-calname&gt;\n        &lt;parameters&gt;\n          &lt;value&gt;text&lt;/value&gt;\n        &lt;/parameters&gt;\n        &lt;text&gt;Australian Holidays&lt;/text&gt;\n      &lt;/x-wr-calname&gt;\n      &lt;x-wr-relcalid&gt;\n        &lt;parameters&gt;\n          &lt;value&gt;text&lt;/value&gt;\n        &lt;/parameters&gt;\n        &lt;text&gt;D4167B74-C414-11D6-BA97-003065F198AC&lt;/text&gt;\n      &lt;/x-wr-relcalid&gt;\n      &lt;x-wr-timezone&gt;\n        &lt;parameters&gt;\n          &lt;value&gt;text&lt;/value&gt;\n        &lt;/parameters&gt;\n        &lt;text&gt;Asia/Hong_Kong&lt;/text&gt;\n      &lt;/x-wr-timezone&gt;\n      &lt;version&gt;\n        &lt;parameters/&gt;\n        &lt;text&gt;2.0&lt;/text&gt;\n      &lt;/version&gt;\n    &lt;/properties&gt;\n    &lt;components&gt;\n      &lt;vtimezone&gt;\n        &lt;properties&gt;\n          &lt;tzid&gt;\n            &lt;parameters/&gt;\n            &lt;text&gt;Asia/Hong_Kong&lt;/text&gt;\n          &lt;/tzid&gt;\n          &lt;last-modified&gt;\n            &lt;parameters/&gt;\n            &lt;date-time&gt;2006-01-17T16:36:57Z&lt;/date-time&gt;\n          &lt;/last-modified&gt;\n        &lt;/properties&gt;\n        &lt;components&gt;\n          &lt;standard&gt;\n            &lt;properties&gt;\n              &lt;dtstart&gt;\n                &lt;parameters/&gt;\n                &lt;date-time&gt;1932-12-13T20:45:52&lt;/date-time&gt;\n              &lt;/dtstart&gt;\n              &lt;tzoffsetto&gt;\n                &lt;parameters/&gt;\n                &lt;utc-offset&gt;+08:00&lt;/utc-offset&gt;\n              &lt;/tzoffsetto&gt;\n              &lt;tzoffsetfrom&gt;\n                &lt;parameters/&gt;\n                &lt;utc-offset&gt;Z&lt;/utc-offset&gt;\n              &lt;/tzoffsetfrom&gt;\n              &lt;tzname&gt;\n                &lt;parameters/&gt;\n                &lt;text&gt;HKT&lt;/text&gt;\n              &lt;/tzname&gt;\n            &lt;/properties&gt;\n            &lt;components/&gt;\n          &lt;/standard&gt;\n          &lt;daylight&gt;\n            &lt;properties&gt;\n              &lt;dtstart&gt;\n                &lt;parameters/&gt;\n                &lt;date-time&gt;1946-04-20T03:30:00&lt;/date-time&gt;\n              &lt;/dtstart&gt;\n              &lt;tzoffsetto&gt;\n                &lt;parameters/&gt;\n                &lt;utc-offset&gt;+09:00&lt;/utc-offset&gt;\n              &lt;/tzoffsetto&gt;\n              &lt;tzoffsetfrom&gt;\n                &lt;parameters/&gt;\n                &lt;utc-offset&gt;+08:00&lt;/utc-offset&gt;\n              &lt;/tzoffsetfrom&gt;\n              &lt;tzname&gt;\n                &lt;parameters/&gt;\n                &lt;text&gt;HKST&lt;/text&gt;\n              &lt;/tzname&gt;\n            &lt;/properties&gt;\n            &lt;components/&gt;\n          &lt;/daylight&gt;\n        &lt;/components&gt;\n      &lt;/vtimezone&gt;\n      &lt;vevent&gt;\n        &lt;properties&gt;\n          &lt;uid&gt;\n            &lt;parameters/&gt;\n            &lt;text&gt;D416469E-C414-11D6-BA97-003065F198AC&lt;/text&gt;\n          &lt;/uid&gt;\n          &lt;dtstamp&gt;\n            &lt;parameters/&gt;\n            &lt;date-time&gt;2002-09-06T09:44:59Z&lt;/date-time&gt;\n          &lt;/dtstamp&gt;\n          &lt;summary&gt;\n            &lt;parameters/&gt;\n            &lt;text&gt;Australia Day&lt;/text&gt;\n          &lt;/summary&gt;\n          &lt;rrule&gt;\n            &lt;parameters/&gt;\n            &lt;recur&gt;FREQ=YEARLY;INTERVAL=1;BYMONTH=1&lt;/recur&gt;\n          &lt;/rrule&gt;\n          &lt;dtstart&gt;\n            &lt;parameters&gt;\n              &lt;value&gt;date&lt;/value&gt;\n            &lt;/parameters&gt;\n            &lt;date&gt;2002-01-26&lt;/date&gt;\n          &lt;/dtstart&gt;\n          &lt;dtend&gt;\n            &lt;parameters&gt;\n              &lt;value&gt;date&lt;/value&gt;\n            &lt;/parameters&gt;\n            &lt;date&gt;2002-01-27&lt;/date&gt;\n          &lt;/dtend&gt;\n        &lt;/properties&gt;\n        &lt;components/&gt;\n      &lt;/vevent&gt;\n    &lt;/components&gt;\n  &lt;/vcalendar&gt;\n&lt;/icalendar&gt;\n</code></pre>"},{"location":"serializer/jmap/","title":"iCal4j Serializer - JMAP","text":"<p>Support for serialization of iCalendar objects to JMAP-defined JSON objects.</p>"},{"location":"serializer/json/","title":"iCal4j Serializer - jCal/jCard","text":"<p>iCal4j support serialization to and from the jCal format, which is a direct translation of iCalendar to JSON.</p>"},{"location":"serializer/jsonld/","title":"iCal4j Serializer - JSON-LD","text":"<p>Support for serialization of iCalendar objects to JSON-LD (as defined by Schema.org).</p>"},{"location":"serializer/xml/","title":"iCal4j Serializer - xCal/xCard","text":"<p>iCal4j support serialization to and from the xCal format, which is a direct translation of iCalendar to XML.</p>"},{"location":"serializer/jotn/","title":"iCal4j Serializer - JOT Notation","text":"<p>The JOT notation is JSON format derived from iCalendar and vCard properties, that may be used to construct and modify iCalendar and vCard objects.</p>"},{"location":"serializer/jotn/#overview","title":"Overview","text":"<p>JOT does not provide a complete representation of iCalendar and vCard, but rather is used to convey concise information to construct and modify object data as would be commonly found in a REST-ful API.</p> <p>For example, if we want to create a new event, rather than providing a complete iCalendar object (as would be the case with xCal/jCal/JSCalendar, etc.) we can provide just the required information:</p> <pre><code>{\n  \"summary\": \"Monthly financial debrief\",\n  \"rrule\": \"FREQ=MONTHLY;BYDAY=-1FR\"\n}\n</code></pre> <p>Obviously there is a lot of missing information required to construct a complete iCalendar object, but the serializer implementation may be used to fill in those blanks.</p>"},{"location":"serializer/jotn/#json-structure","title":"JSON Structure","text":"<p>JOT notation represents a list of properties that may be used to construct a calendar, component or card object from the iCalendar and vCard specifications. </p> <p>Each property may take one of two forms: Scalar and Object.</p>"},{"location":"serializer/jotn/#scalar-notation","title":"Scalar Notation","text":"<p>Scalar notation is used to represent a simple property or parameter consisting of a name/value pair. This notation supports string values for all properties, in addition to boolean and integer where applicable. Binary values  should be encoded as a BASE64 string.</p> <pre><code>{\n  \"summary\": \"Monthly financial debrief\",\n  \"priority\": 6,\n  \"attendee\": {\n    \"rsvp\": true\n  }\n}\n</code></pre>"},{"location":"serializer/jotn/#object-notation","title":"Object Notation","text":"<p>Object notation is used to represent a complex property that contains one or more parameters. This notation defines properties as nested JSON objects with scalar notation used to describe parameters and the property value.</p> <pre><code>{\n  \"dtstart\": {\n    \"value\": \"date\",\n    \"date\": \"2024-01-01\"\n  },\n  \"organizer\": {\n    \"cn\": \"John Doe\",\n    \"cal-address\": \"mailto:jdoe@example.com\"\n  }\n}\n</code></pre>"},{"location":"serializer/jotn/alarm/","title":"iCal4j Serializer - JOT Alarm","text":"<p>TBD.</p>"},{"location":"serializer/jotn/availability/","title":"iCal4j Serializer - JOT Availability","text":"<p>The JOT Availability serializer supports the incremental build of registered availability of resources.</p>"},{"location":"serializer/jotn/availability/#overview","title":"Overview","text":"<p>A VAVAILABILITY component may include the following properties once:</p> <ul> <li>DTSTAMP</li> <li>UID</li> <li>BUSYTYPE</li> <li>CLASS</li> <li>CREATED</li> <li>DESCRIPTION</li> <li>DTSTART</li> <li>LAST-MODIFIED</li> <li>LOCATION</li> <li>ORGANIZER</li> <li>PRIORITY</li> <li>SEQUENCE</li> <li>SUMMARY</li> <li>URL</li> <li>DTEND</li> <li>DURATION</li> </ul> <p>The following properties may occur more than once:</p> <ul> <li>CATEGORIES</li> <li>COMMENT</li> <li>CONTACT</li> </ul>"},{"location":"serializer/jotn/availability/#http-payloads","title":"HTTP Payloads","text":"<p>Combined with HTTP verbs an API for workflow management can be created.</p>"},{"location":"serializer/jotn/available/","title":"iCal4j Serializer - JOT Available","text":"<p>TBD.</p>"},{"location":"serializer/jotn/calendar/","title":"iCal4j Serializer - JOT Calendar","text":"<p>The JOT Calendar serializer may be used to create or update Calendar object properties.</p>"},{"location":"serializer/jotn/calendar/#overview","title":"Overview","text":"<p>An iCalendar object may include the following properties once:</p> <ul> <li>UID</li> <li>LAST-MODIFIED</li> <li>URL</li> <li>REFRESH</li> <li>SOURCE</li> <li>COLOR</li> </ul> <p>An iCalendar object may include the following properties multiple times:</p> <ul> <li>NAME</li> <li>DESCRIPTION</li> <li>CATEGORIES</li> <li>IMAGE</li> </ul> <p>An example using all of these properties may look like this:</p> <pre><code>{\n  \"uid\": \"1234-abcd\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"url\": \"https://example.com/public_holidays\",\n  \"refresh-interval\": \"P1W\",\n  \"source\": \"https://example.com/public_holidays.ics\",\n  \"color\": \"orange\",\n  \"name\": \"International Public Holidays\",\n  \"description\": \"Globally recognised public holidays\",\n  \"categories\": [\"holidays\", \"global\"],\n  \"image\": \"https://example.com/images/holiday.png\"\n}\n</code></pre>"},{"location":"serializer/jotn/calendar/#http-payloads","title":"HTTP Payloads","text":"<p>Such a payload may be used to add, remove or update properties. For example, used in conjunction with HTTP verbs full CRUD operations may be implemented:</p>"},{"location":"serializer/jotn/calendar/#create-a-calendar","title":"Create a calendar","text":"<pre><code>POST https://api.example.com/v1/calendars\n{\n  \"name\": \"International Public Holidays\",\n  \"description\": \"Globally recognised public holidays\",\n  \"categories\": \"holidays\"\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"name\": \"International Public Holidays\",\n  \"description\": \"Globally recognised public holidays\",\n  \"categories\": \"holidays\"\n}\n</code></pre>"},{"location":"serializer/jotn/calendar/#update-a-calendar-by-adding-additional-properties","title":"Update a calendar by adding additional properties","text":"<pre><code>POST https://api.example.com/v1/calendars/1234-abcd\n{\n  \"categories\": \"global\"\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"name\": \"International Public Holidays\",\n  \"description\": \"Globally recognised public holidays\",\n  \"categories\": [\"holidays\", \"global\"]\n}\n</code></pre>"},{"location":"serializer/jotn/calendar/#update-a-calendar-by-removing-existing-properties","title":"Update a calendar by removing existing properties","text":"<pre><code>DELETE https://api.example.com/v1/calendars/1234-abcd\n{\n  \"categories\": [\"global\"]\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"name\": \"International Public Holidays\",\n  \"description\": \"Globally recognised public holidays\",\n  \"categories\": \"holidays\"\n}\n</code></pre>"},{"location":"serializer/jotn/calendar/#replace-one-or-more-properties","title":"Replace one or more properties","text":"<pre><code>PUT https://api.example.com/v1/calendars/1234-abcd\n{\n  \"name\": \"Public Holidays\",\n  \"description\": \"International public holidays\",\n  \"categories\": [\"international\", \"breaks\"]\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"name\": \"Public Holidays\",\n  \"description\": \"International public holidays\",\n  \"categories\": [\"international\", \"breaks\"]\n}\n</code></pre>"},{"location":"serializer/jotn/card/","title":"iCal4j Serializer - JOT Card","text":"<p>The JOT Card serializer supports the incremental build of entity details such as contacts.</p>"},{"location":"serializer/jotn/card/#overview","title":"Overview","text":"<p>A VCARD object may include the following properties once:</p> <ul> <li>KIND</li> <li>N</li> <li>BDAY</li> <li>ANNIVERSARY</li> <li>GENDER</li> <li>REV</li> <li>UID</li> </ul> <p>The following properties may occur more than once:</p> <ul> <li>SOURCE</li> <li>XML</li> <li>FN</li> <li>NICKNAME</li> <li>PHOTO</li> <li>ADR</li> <li>TEL</li> <li>EMAIL</li> <li>IMPP</li> <li>LANG</li> <li>TZ</li> <li>GEO</li> <li>TITLE</li> <li>ROLE</li> <li>LOGO</li> <li>ORG</li> <li>MEMBER</li> <li>RELATED</li> <li>CATEGORIES</li> <li>NOTE</li> <li>SOUND</li> <li>CLIENTPIDMAP</li> <li>URL</li> <li>KEY</li> <li>FBURL</li> <li>CALADRURI</li> <li>CALURI</li> </ul>"},{"location":"serializer/jotn/card/#http-payloads","title":"HTTP Payloads","text":"<p>Combined with HTTP verbs an API for entity management can be created.</p>"},{"location":"serializer/jotn/card/#create-a-new-entity","title":"Create a new entity","text":"<pre><code>POST https://api.example.com/v1/entities\n{\n  \"kind\": \"individual\",\n  \"n\": \";;;;;;\",\n  \"categories\": \"contacts\"\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"rev\": \"20240117T105900Z\",\n  \"kind\": \"individual\",\n  \"n\": \";;;;;;\",\n  \"categories\": \"contacts\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/","title":"iCal4j Serializer - JOT Event","text":"<p>The JOT Event serializer supports the incremental build of events.</p>"},{"location":"serializer/jotn/event/#overview","title":"Overview","text":"<p>A VEVENT component may include the following properties once:</p> <ul> <li>DTSTAMP</li> <li>UID</li> <li>DTSTART</li> <li>CLASS</li> <li>CREATED</li> <li>DESCRIPTION</li> <li>GEO</li> <li>LAST-MODIFIED</li> <li>LOCATION</li> <li>ORGANIZER</li> <li>PRIORITY</li> <li>SEQUENCE</li> <li>STATUS</li> <li>SUMMARY</li> <li>TRANSP</li> <li>URL</li> <li>RECURRENCE-ID</li> <li>RRULE</li> <li>DTEND</li> <li>DURATION</li> </ul> <p>The following properties may occur more than once:</p> <ul> <li>ATTACH</li> <li>ATTENDEE</li> <li>CATEGORIES</li> <li>COMMENT</li> <li>CONTACT</li> <li>EXDATE</li> <li>RSTATUS</li> <li>RELATED</li> <li>RESOURCES</li> <li>RDATE</li> </ul>"},{"location":"serializer/jotn/event/#http-payloads","title":"HTTP Payloads","text":"<p>Combined with HTTP verbs an API for event management can be created.</p>"},{"location":"serializer/jotn/event/#create-a-new-event","title":"Create a new event","text":"<pre><code>POST https://api.example.com/v1/events\n{\n  \"dtstart\": \"2024-01-01\",\n  \"summary\": \"New Years Day\",\n  \"categories\": \"holidays\"\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"dtstamp\": \"2024-01-17T10:59:00Z\",\n  \"created\": \"2024-01-17T10:59:00Z\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"dtstart\": \"2024-01-01\",\n  \"summary\": \"New Years Day\",\n  \"categories\": \"holidays\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/#add-a-recurrence-rule-to-an-event","title":"Add a recurrence rule to an event","text":"<pre><code>POST https://api.example.com/v1/events/1234-abcd\n{\n  \"rrule\": \"FREQ=YEARLY\"\n}\n\nRESPONSE:\n\n{\n  \"uid\": \"1234-abcd\",\n  \"dtstamp\": \"2024-01-17T10:59:00Z\",\n  \"created\": \"2024-01-17T10:59:00Z\",\n  \"last-modified\": \"2024-01-17T10:59:00Z\",\n  \"dtstart\": \"2024-01-01\",\n  \"summary\": \"New Years Day\",\n  \"categories\": \"holidays\",\n  \"rrule\": \"FREQ=YEARLY\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/#customize-an-occurrence-of-a-recurring-event","title":"Customize an occurrence of a recurring event","text":"<pre><code>POST https://api.example.com/v1/events/1234-abcd/20250101\n{\n  \"description\": \"New Years Day (2025)\"\n}\n\nRESPONSE:\n\n{\n    \"uid\": \"1234-abcd\",\n    \"recurrence-id\": \"20250101\",\n    \"dtstamp\": \"2024-01-17T10:59:00Z\",\n    \"created\": \"2024-01-17T10:59:00Z\",\n    \"last-modified\": \"2024-01-17T10:59:00Z\",\n    \"dtstart\": \"2024-01-01\",\n    \"summary\": \"New Years Day\",\n    \"categories\": \"holidays\",\n    \"description\": \"New Years Day (2025)\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/#cancel-an-occurrence-of-a-recurring-event","title":"Cancel an occurrence of a recurring event","text":"<pre><code>POST https://api.example.com/v1/events/1234-abcd\n{\n  \"exdate\": \"20260101\"\n}\n\nRESPONSE:\n\n{\n    \"uid\": \"1234-abcd\",\n    \"dtstamp\": \"2024-01-17T10:59:00Z\",\n    \"created\": \"2024-01-17T10:59:00Z\",\n    \"last-modified\": \"2024-01-17T10:59:00Z\",\n    \"dtstart\": \"2024-01-01\",\n    \"summary\": \"New Years Day\",\n    \"categories\": \"holidays\",\n    \"rrule\": \"FREQ=YEARLY\",\n    \"exdate\": \"20260101\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/#retrieve-all-occurrences-of-a-recurring-event","title":"Retrieve all occurrences of a recurring event","text":"<pre><code>GET https://api.example.com/v1/events/1234-abcd\n\nRESPONSE:\n\n[\n    {\n        \"uid\": \"1234-abcd\",\n        \"dtstamp\": \"2024-01-17T10:59:00Z\",\n        \"created\": \"2024-01-17T10:59:00Z\",\n        \"last-modified\": \"2024-01-17T10:59:00Z\",\n        \"dtstart\": \"2024-01-01\",\n        \"summary\": \"New Years Day\",\n        \"categories\": \"holidays\",\n        \"rrule\": \"FREQ=YEARLY\",\n        \"exdate\": \"20260101\"\n    },\n    {\n        \"uid\": \"1234-abcd\",\n        \"recurrence-id\": \"20250101\",\n        \"dtstamp\": \"2024-01-17T10:59:00Z\",\n        \"created\": \"2024-01-17T10:59:00Z\",\n        \"last-modified\": \"2024-01-17T10:59:00Z\",\n        \"dtstart\": \"2024-01-01\",\n        \"summary\": \"New Years Day\",\n        \"categories\": \"holidays\",\n        \"description\": \"New Years Day (2025)\"\n    }\n]\n</code></pre>"},{"location":"serializer/jotn/event/#update-an-existing-event-idemptotently","title":"Update an existing event (idemptotently)","text":"<pre><code>PATCH https://api.example.com/v1/events/1234-abcd\n{\n  \"summary\": \"New Years Day (Public Holiday)\"\n}\n\nRESPONSE:\n\n{\n    \"uid\": \"1234-abcd\",\n    \"dtstamp\": \"2024-01-17T10:59:00Z\",\n    \"created\": \"2024-01-17T10:59:00Z\",\n    \"last-modified\": \"2024-01-17T10:59:00Z\",\n    \"dtstart\": \"2024-01-01\",\n    \"summary\": \"New Years Day (Public Holiday)\",\n    \"categories\": \"holidays\",\n    \"rrule\": \"FREQ=YEARLY\",\n    \"exdate\": \"20260101\"\n}\n</code></pre>"},{"location":"serializer/jotn/event/#delete-an-existing-event","title":"Delete an existing event","text":"<pre><code>DELETE https://api.example.com/v1/events/1234-abcd\n\nRESPONSE:\n\n[\n    {\n        \"uid\": \"1234-abcd\",\n        \"dtstamp\": \"2024-01-17T10:59:00Z\",\n        \"created\": \"2024-01-17T10:59:00Z\",\n        \"last-modified\": \"2024-01-17T10:59:00Z\",\n        \"dtstart\": \"2024-01-01\",\n        \"summary\": \"New Years Day (Public Holiday)\",\n        \"categories\": \"holidays\",\n        \"rrule\": \"FREQ=YEARLY\",\n        \"exdate\": \"20260101\"\n    },\n    {\n        \"uid\": \"1234-abcd\",\n        \"recurrence-id\": \"20250101\",\n        \"dtstamp\": \"2024-01-17T10:59:00Z\",\n        \"created\": \"2024-01-17T10:59:00Z\",\n        \"last-modified\": \"2024-01-17T10:59:00Z\",\n        \"dtstart\": \"2024-01-01\",\n        \"summary\": \"New Years Day\",\n        \"categories\": \"holidays\",\n        \"description\": \"New Years Day (2025)\"\n    }\n]\n</code></pre>"},{"location":"serializer/jotn/journal/","title":"iCal4j Serializer - JOT Journal","text":"<p>The JOT Journal serializer supports the incremental build of records such as notes and annotations.</p>"},{"location":"serializer/jotn/journal/#overview","title":"Overview","text":"<p>A JOURNAL component may include the following properties once:</p> <ul> <li>DTSTAMP</li> <li>UID</li> <li>CLASS</li> <li>CREATED</li> <li>DTSTART</li> <li>LAST-MODIFIED</li> <li>ORGANIZER</li> <li>RECURRENCE-ID</li> <li>SEQUENCE</li> <li>STATUS</li> <li>SUMMARY</li> <li>URL</li> <li>RRULE</li> </ul> <p>The following properties may occur more than once:</p> <ul> <li>ATTACH</li> <li>ATTENDEE</li> <li>CATEGORIES</li> <li>COMMENT</li> <li>CONTACT</li> <li>DESCRIPTION</li> <li>EXDATE</li> <li>RELATED</li> <li>RDATE</li> <li>RSTATUS</li> </ul>"},{"location":"serializer/jotn/journal/#http-payloads","title":"HTTP Payloads","text":"<p>Combined with HTTP verbs an API for knowledge management can be created.</p>"},{"location":"serializer/jotn/location/","title":"iCal4j Serializer - JOT Location","text":"<p>TBD.</p>"},{"location":"serializer/jotn/participant/","title":"iCal4j Serializer - JOT Participant","text":"<p>TBD.</p>"},{"location":"serializer/jotn/resource/","title":"iCal4j Serializer - JOT Resource","text":"<p>TBD.</p>"},{"location":"serializer/jotn/todo/","title":"iCal4j Serializer - JOT ToDo","text":"<p>The JOT ToDo serializer supports the incremental build of workflow-based actions such as tasks.</p>"},{"location":"serializer/jotn/todo/#overview","title":"Overview","text":"<p>A VTODO component may include the following properties once:</p> <ul> <li>DTSTAMP</li> <li>UID</li> <li>CLASS</li> <li>CREATED</li> <li>DESCRIPTION</li> <li>DTSTART</li> <li>GEO</li> <li>LAST-MODIFIED</li> <li>LOCATION</li> <li>ORGANIZER</li> <li>PERCENT-COMPLETE</li> <li>PRIORITY</li> <li>RECURRENCE-ID</li> <li>SEQUENCE</li> <li>STATUS</li> <li>SUMMARY</li> <li>URL</li> <li>RRULE</li> <li>DUE</li> <li>DURATION</li> </ul> <p>The following properties may occur more than once:</p> <ul> <li>ATTACH</li> <li>ATTENDEE</li> <li>CATEGORIES</li> <li>COMMENT</li> <li>CONTACT</li> <li>EXDATE</li> <li>RSTATUS</li> <li>RELATED</li> <li>RESOURCES</li> <li>RDATE</li> </ul>"},{"location":"serializer/jotn/todo/#http-payloads","title":"HTTP Payloads","text":"<p>Combined with HTTP verbs an API for workflow management can be created.</p>"},{"location":"services/","title":"iCal4j Services","text":"<p>A collection of iCalendar functions delivered as HTTP services.</p>"},{"location":"services/#overview","title":"Overview","text":"<p>iCal4j services is a collection of libraries that support deployment as a service. For example:</p> <ul> <li>iCal4j Validator</li> <li>iCal4j Serializer</li> <li>iCal4j FreeBusy</li> <li>iCal4j Connector</li> <li>iCal4j Integration</li> <li>iCal4j Query</li> <li>iCal4j User Agent</li> <li>...</li> </ul> <p>Each of these libraries are bundled with an HTTP Servlet and may be deployed either in a Web container or standalone with an embedded Jetty server. They are stateless services and containerisation will be supported to provide maximum choice in how they are deployed.</p>"},{"location":"services/#chaining-services","title":"Chaining Services","text":"<p>iCal4j services are designed to be able to chain them together to customise according to your requirements.</p> <p>For example, if you need to send a meeting invitation to a group of individuals you can achieve this as follows:</p> <pre><code> ical4j template meeting | ical4j useragent request | ical4j integration send\n</code></pre> <p>Here we are using iCal4j template to create a meeting invitation, user agent to format for email, and integration to send the email to all recipients.</p> <p>Alternatively, you can listen for requests, validate and add to a calendar store like so:</p> <pre><code>ical4j integration receive | ical4j validator check | ical4j connector add --collection=Orders\n</code></pre> <p>It is also easy to integrate with other tools, such a JQ for extracting information:</p> <pre><code>ical4j connector get --uid 1234 | ical4j serializer serialize | jq '.attendee'\n</code></pre>"},{"location":"services/#examples","title":"Examples","text":"<p>The following examples demonstrate how you might use iCal4j services to enhance an application or service.</p>"},{"location":"services/#validate-and-sanitise-incoming-icalendar-data","title":"Validate (and sanitise) incoming iCalendar data","text":"<p>The issue of calendar spam and other embedded nasties is becoming more of a concern for iCalendar data. The iCal4j Validator can potentially be used to screen incoming data not only for RFC compliance but also against unwanted or blacklisted content.</p>"},{"location":"services/#generate-atom-feeds-from-published-icalendar-data","title":"Generate Atom feeds from published iCalendar data","text":"<p>Using the iCal4j Serializer you can easily transform iCalendar data to Atom feed data, including expansion of recurring events.</p>"},{"location":"services/#publish-freebusy-information-for-published-icalendar-data","title":"Publish free/busy information for published iCalendar data","text":"<p>You may have a need for the iCal4j FreeBusy service to generate free/busy data from resource calendars to assist  with scheduling.</p>"},{"location":"services/#query-icalendar-data-using-filter-expressions","title":"Query iCalendar data using filter expressions","text":"<p>iCal4j includes support for a filter expression language that may be used to extract information from iCalendar object data using the iCal4j Query service.</p>"},{"location":"services/#process-icalendar-itip-for-scheduling","title":"Process iCalendar iTIP for scheduling","text":"<p>The iTIP specification defines how to coordinate iCalendar data between multiple calendar user agents (CUAs), and the iCal4j User Agent simplifies the processing of this data.</p>"},{"location":"services/#send-and-receive-icalendar-data-asynchronously","title":"Send and receive iCalendar data asynchronously","text":"<p>TBD.</p>"},{"location":"services/#manage-icalendar-data-with-caldav","title":"Manage iCalendar data with CalDAV","text":"<p>TBD.</p>"},{"location":"streams/","title":"iCal4j Streams","text":"<p>Reactive programming for iCalendar and vCard.</p> <p></p>"},{"location":"streams/#overview","title":"Overview","text":"<p>Calendaring and scheduling applications may typically include responding to conditions that trigger certain actions. For example, notifications must be sent for approaching events, overdue tasks, and other conditions that require human interaction.</p> <p>Automated processes also may be triggered by similar conditions, such as updating participation status in a calendar when a response from an attendee is received.</p> <p>This library provides a simple framework for publishing and responding to trigger conditions common to the iCalendar and vCard specifications. It uses Java Reactive Streams to implement a resilient observer pattern that won't negatively impact performance of the observable target.</p>"},{"location":"streams/#record","title":"Record","text":"<p>A record is an immutable object instance containing relevant details of a condition or state change in an iCalendar or vCard model. A record includes a reference to the source object, a URI representing the context of the object (e.g. a collection, a channel, etc.), the type of record, and a timestamp indicating when it occurred.</p> <p>Applications that publish records implement the <code>Flow.Publisher&lt;Record&gt;</code> interface in order to notify subscribers of model or state changes.</p>"},{"location":"streams/#trigger","title":"Trigger","text":"<p>A trigger implements the custom logic required to respond to changes in conditions or state. A trigger is similar to an event handler, with the main difference being each trigger instance is associated with a single record subscriber.</p>"},{"location":"streams/#record-subscriber","title":"Record Subscriber","text":"<p>A record subscriber listens for new records and notifies its associated trigger. A record subscriber may be configured to control the flow of records depending on the requirements of the trigger (e.g. triggers that take a long time to complete may require tuning in the subscriber).</p>"},{"location":"streams/workflow/","title":"iCal4j Streams - Workflow","text":"<p>A workflow automation library using iCalendar to define workflow definitions and state.</p>"},{"location":"streams/workflow/#overview","title":"Overview","text":"<p>A typical workflow system supports the creation of workflow rules that control how tasks are generated and fulfilled.</p> <p>The iCal4j Actions Workflow Engine builds on the streams framework with support for configurable workflows defined as iCalendar actions.</p>"},{"location":"streams/workflow/#time-based-workflows","title":"Time-based workflows","text":"<p>Such workflow definitions can be expressed as time-based recurring actions:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1H\nSUMMARY:Turn on the lights\nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>The workflow engine will generate a list of occurrences from this definition (for a specific period of time) to schedule tasks:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1H\nSUMMARY:Turn on the lights\nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\nRECURRENCE-ID:20250101T080000\nSTATUS:NEEDS-ACTION\nLAST-MODIFIED:20241231T210000Z\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>A task executor may specifically check for tasks that it can complete, and update the status accordingly:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1H\nSUMMARY:Turn on the lights\nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\nRECURRENCE-ID:20250101T080000\nSTATUS:IN-PROCESS\nATTENDEE:mailto:joeb@example.com\nLAST-MODIFIED:20250101T080130Z\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>Note that the \"task executor\" may be a human or an automated system</p> <p>Once completed the task can be marked as such:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1H\nSUMMARY:Turn on the lights\nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\nRECURRENCE-ID:20250101T080000\nSTATUS:COMPLETED\nATTENDEE:mailto:joeb@example.com\nLAST-MODIFIED:20250101T080500Z\nCOMPLETED:20250101T080500Z\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>If a task is not fulfilled in the required timeframe a dedicated task reaper can close it automatically:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1H\nRECURRENCE-ID:20250101T080000\nSTATUS:CANCELLED\nSUMMARY:Turn on the lights\nRRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\nLAST-MODIFIED:20250101T090100Z\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>This approach to workflows fulfills the following necessary features:</p> <ul> <li>Workflow tasks are durable, in that if the workflow system has an outage the currently active tasks are preserved.</li> <li>State of tasks is also tracked and durable.</li> <li>Timers are implicitly defined in the workflow definition such that incomplete tasks are automatically expired.</li> </ul>"},{"location":"streams/workflow/#other-workflow-triggers","title":"Other workflow triggers","text":"<p>Some workflows may not define a recurring time component, in which case they would only be triggered by some condition:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1D\nSUMMARY:Approve funding request\nUID:9999\nEND:VTODO\nEND:VCALENDAR\n</code></pre> <p>For such workflows the engine would recognise the conditions required to generate a new task:</p> <pre><code>BEGIN:VCALENDAR\nBEGIN:VTODO\nDTSTART:20250101T080000\nDURATION:PT1D\nSUMMARY:Approve funding request\nRELATED;RELTYPE=PARENT;VALUE=UID:9999\nRELATED;VALUE=UID:1234\nSTATUS:NEEDS-ACTION\nLAST-MODIFIED:20241231T210000Z\nEND:VTODO\nEND:VCALENDAR\n</code></pre>"},{"location":"streams/workflow/#examples","title":"Examples","text":"<p>The following examples demonstrate how you could use iCalendar to implement automated workflows.</p>"},{"location":"streams/workflow/#trial-subscription","title":"Trial Subscription","text":"<p>A trial subscription allows the user to use a product for free for 30 days, after which the user will be billed on the same day each month.</p>"},{"location":"streams/workflow/#create-a-subscription","title":"Create a subscription","text":"<p>Used as a linked reference for related activities.</p>"},{"location":"streams/workflow/#send-email-notifications","title":"Send email notifications","text":"<p>Trigger: Subscription created/updated.</p> <p>Description:</p> <ul> <li>Send a welcome email.</li> <li>Schedule a reminder email to be sent prior to end of trial (linked to subscription).</li> <li>Schedule an end of trial email to be sent after the end of the trial period (linked to subscription).</li> </ul>"},{"location":"streams/workflow/#create-monthly-charge-recurring-after-30-days","title":"Create monthly charge (recurring after 30 days)","text":"<p>Trigger: Subscription created/updated.</p> <p>Description:</p> <ul> <li>Schedule a monthly charge, 30 days from subscription start date (linked to subscription).</li> </ul>"},{"location":"streams/workflow/#process-recurring-charge","title":"Process recurring charge","text":"<p>Trigger: Timer</p> <p>Description:</p> <ul> <li>Process billing</li> <li>Create invoice linked to charge occurrence</li> </ul>"},{"location":"streams/workflow/#send-invoice-email","title":"Send invoice email","text":"<p>Trigger: Invoice created/updated.</p> <p>Description:</p> <ul> <li>Send invoice via email</li> </ul>"},{"location":"streams/workflow/#process-cancellations","title":"Process cancellations","text":"<p>Trigger: Subscription cancelled.</p> <p>Description:</p> <ul> <li>Send a cancelled subscriptipn email</li> <li>Cancel subscription-linked reminder/end of trial email notifications</li> <li>Cancel subscription-linked monthly charge</li> </ul>"},{"location":"streams/workflow/#approval-flow","title":"Approval Flow","text":"<p>An approval flow provides a workflow for approving service requests followed by fulfilment.</p>"},{"location":"streams/workflow/#create-approval-action","title":"Create approval action","text":"<p>Trigger: Request created/updated.</p> <p>Description:</p> <ul> <li>Create approval action with due date corresponding to SLA</li> <li></li> </ul>"},{"location":"template/","title":"iCal4j Template","text":"<p>iCal4j Template provides support for rendering iCalendar (and vCard) objects to other formats.</p>"},{"location":"template/#overview","title":"Overview","text":"<p>Rendering iCalendar and vCard data in UIs is a necessary feature of most calendaring applications, and this library provides templates to assist. Templates for individual properties or componenents may be combined to produce rendered views in various formats that may be used to represent objects.</p>"},{"location":"template/#usage","title":"Usage","text":"<p>iCal4j Template provides helpers for rendering data with Handlebars, which may be useful rendering objects in HTML or other formats.</p>"},{"location":"template/examples/","title":"iCal4j Template - Examples","text":"<p>TBD.</p>"},{"location":"template/thymeleaf/","title":"iCal4j Template - Thymeleaf","text":"<p>Thymeleaf is a popular templating framework for Java, with good support also built into the Spring framework. This library provides templates and template fragments for rendering iCalendar and vCard data as HTML and other formats.</p>"},{"location":"template/thymeleaf/#icalendar","title":"iCalendar","text":"<p>The following table outlines the supported iCalendar properties that are supported, and may be used to construct custom UIs for calendar components.</p> Property Datatype Readonly Writable ATTACH URL or Binary Icon with link (optional preview) URL input or file upload control CATEGORIES Text list List of Badges Autocomplete text input field CLASS Text list List of Badges Dropdown selection COMMENT Multiline text Rendered text (e.g. links with optional preview, dates and times, email, etc.) Multiline text input DESCRIPTION Multiline text Rendered text (e.g. links with optional preview, dates and times, email, etc.) Multiline text input GEO Latitude/longitude pair Map pin Searchable geocode selection LOCATION Text Formatted text with optional link (e.g. to a map) Autocomplete text input field PERCENT-COMPLETE Integer (0-100) Text or progress icon Number input field PRIORITY Integer (0-9) Badge (text corresponding to value) Range slider field RESOURCES Text list List of Badges with optional link Autocomplete text input field STATUS Text Badge Dropdown selection SUMMARY Text Rendered text (e.g. links with optional preview, dates and times, email, etc.) Single line text input COMPLETED UTC timestamp"},{"location":"template/agile/","title":"iCal4j Template - Agile","text":"<p>Templates for working with Agile methodologies.</p>"},{"location":"template/agile/#overview","title":"Overview","text":"<p>Agile is a software development methodology that prioritises  collaboration between developers and users and responding rapidly to changing requirements. Agile is also successfully applied more generally as a project management methodology.</p>"},{"location":"template/agile/backlog/","title":"iCal4j Template - Agile: Backlog","text":"<p>A Backlog represents a group of work items that may be associated with zero or more Sprints.</p>"},{"location":"template/agile/criteria/","title":"iCal4j Template - Agile: Criteria","text":"<p>A Criteria represents a set of customer requirements that are used to guide the defined work items. Also known as Acceptance Criteria, Criteria document solution details for work items such as Epics and Stories.</p>"},{"location":"template/agile/epic/","title":"iCal4j Template - Agile: Epic","text":"<p>An Epic is used to group work items that combine to provide a larger feature. These features are typically demonstrable in ceremonies such as showcases.</p>"},{"location":"template/agile/retrospective/","title":"iCal4j Template - Agile: Retrospective","text":"<p>A Backlog represents a group of work items that may be associated with zero or more Sprints.</p> <p>A Retrospective is a special kind of Meeting Agenda that aims to reflect on current progress and practices to identify what works and what doesn't. As with a regular Agenda, any points not discussed may be carried over to the next Retrospective Meeting.</p>"},{"location":"template/agile/sprint/","title":"iCal4j Template - Agile: Sprint","text":"<p>A key aspect of many Agile implementations is to work in timeboxed iterations, often called sprints. Here we provide a Sprint template to represent a single iteration that has an associated backlog of work items planned for the iteration.</p>"},{"location":"template/agile/story/","title":"iCal4j Template - Agile: Story","text":"<p>A Story represents a single work item that can be implemented and tested independently of others. Typically, each Story will have its own acceptance criteria to define the parameters and constraints a working implementation.</p>"},{"location":"template/budget/","title":"iCal4j Template - Budget","text":"<p>Budget management templates.</p>"},{"location":"template/budget/#overview","title":"Overview","text":"<p>Financial management is a common need for projects and other collaborative activities. The ability to track available funds and expenses are important when deciding how to prioritise activities.</p>"},{"location":"template/budget/expense/","title":"iCal4j Template - Budget: Expense","text":"<p>An Expense instance outlines the realised funding spend that is ultimately offset by Funding instances. Ideally the total of all Expenses will not exceed the total Funding available. This can be mitigated by establishing an Approval workflow that ensures agreed Funding is available prior to Expense fulfilment. </p>"},{"location":"template/budget/funding/","title":"iCal4j Template - Budget: Funding","text":"<p>A Funding object captures an agreed amount of spend available to specific activities such as projects and teams. The Funding agreement is tracked via the completion status.</p>"},{"location":"template/budget/reimbursement/","title":"iCal4j Template - Budget: Reimbursement","text":"<p>A request for reimbursement of funds used from an external budget (e.g. a personal account, etc.).</p>"},{"location":"template/catalog/","title":"iCal4j Template - Catalog","text":"<p>Templates for managing a product or service catalog.</p>"},{"location":"template/catalog/#overview","title":"Overview","text":"<p>A catalog is a common approach to providing products or services to customers. A catalog can be useful where you have a standard offering that is provisioned/fulfilled on a request basis. Orders can be placed by selecting Offers from the catalog, which are then fulfilled as part of a Workflow.</p>"},{"location":"template/catalog/fulfilment/","title":"iCal4j Template - Catalog: Fulfilment","text":"<p>A Fulfilment is similar to a Task in that it represents some work to be performed, but is specifically constrained to the provisioning or fulfilment of an Order.</p>"},{"location":"template/catalog/offer/","title":"iCal4j Template - Catalog: Offer","text":"<p>An Offer is a time-bounded catalog item that represents an available product or service offering. An Offer may also be a combination of other product/service offerings.</p>"},{"location":"template/catalog/order/","title":"iCal4j Template - Catalog: Order","text":"<p>An Order is similar to a Request, but it is a request for one or more standard offerings, or Offers.</p>"},{"location":"template/groupware/","title":"iCal4j Template - Groupware","text":"<p>Groupware is a term used to describe software tools used for communication and collaboration within and across teams. The most widely adopted use of the iCalendar and vCard standards are in Groupware applications, where almost every calendar implementation supports the iCalendar format.</p>"},{"location":"template/groupware/action/","title":"iCal4j Template - Groupware: Action","text":"<p>Follow-up actions are a common output of meetings. Action instances may be associated with individual meetings or where available, the associated Agenda.</p>"},{"location":"template/groupware/agenda/","title":"iCal4j Template - Groupware: Agenda","text":"<p>An Agenda represents one or more objectives for a meeting, or series of meetings. Sometimes a meeting may not address all the items on an agenda due to lack of time, etc., so it is useful to maintain the Agenda separately such that it may be shared across multiple meetings if required.</p>"},{"location":"template/groupware/agenda/#examples","title":"Examples","text":"<p>Multiple Agenda may be linked in sequence to track items individually. This can be useful where time constraints require additional meetings to address outstanding Agenda items:</p> <pre><code>VToDo item4 = new Agenda().summary(\"Further business and close\").uid(...).apply();\nVToDo item3 = new Agenda().summary(\"Standing items\").uid(...).nextItem(item4).apply();\nVToDo item2 = new Agenda().summary(\"Business arising\").uid(...).nextItem(item3).apply();\nVToDo item1 = new Agenda().summary(\"ACME Monthly Board Meeting\").uid(...).nextItem(item2).apply();\n\nComponentList agenda = new ComponentList(Arrays.asList(item1, item2, item3, item4);\n</code></pre> <p>The resulting component list looks like this:</p> <pre><code>BEGIN:VTODO\nDTSTAMP:20231113T000000Z\nCONCEPT:https://ical4j.org/action-types/ACTION\nSUMMARY:ACME Monthly Board Meeting\nUID:1\nLINK;VALUE=UID;LINKREL=next:2\nEND:VTODO\nBEGIN:VTODO\nDTSTAMP:20231113T000000Z\nCONCEPT:https://ical4j.org/action-types/ACTION\nSUMMARY:Business arising\nUID:2\nLINK;VALUE=UID;LINKREL=next:3\nEND:VTODO\nBEGIN:VTODO\nDTSTAMP:20231113T000000Z\nCONCEPT:https://ical4j.org/action-types/ACTION\nSUMMARY:Standing items\nUID:3\nLINK;VALUE=UID;LINKREL=next:4\nEND:VTODO\nBEGIN:VTODO\nDTSTAMP:20231113T000000Z\nCONCEPT:https://ical4j.org/action-types/ACTION\nSUMMARY:Further business and close\nUID:4\nEND:VTODO\n</code></pre>"},{"location":"template/groupware/appointment/","title":"iCal4j Template - Groupware: Appointment","text":"<p>An Appointment is similar to a Meeting but is more of an open invitation to recipients. It is used to publish events to either a broad or narrow audience, and specifically doesn't cater for RSVPs or Attendance tracking. An Appointment may still have an associated Agenda for planning, but typically wouldn't include follow-up Actions.</p>"},{"location":"template/groupware/attendance/","title":"iCal4j Template - Groupware: Attendance","text":"<p>A useful metric to track for meetings and other events is actual attendance. Whilst opaque events provide an intention to attend, Attendance can provide a record of actual participation after the event.</p>"},{"location":"template/groupware/attendance/#examples","title":"Examples","text":"<p>For each participant in a meeting attendance may be recorded as follows:</p> <pre><code>VEvent meeting = ...\nVCard attendee = ...\nVJournal attendance = new Attendance().participant(new Contact(attendee))\n            .start(LocalDateTime.of(2023, 11, 15, 9, 0))\n            .end(LocalDateTime.of(2023, 11, 15, 9, 30))\n            .context(meeting)\n            .apply();\n</code></pre> <p>The attendance record looks something like this:</p> <pre><code>BEGIN:VJOURNAL\nDTSTAMP:20231115T000000Z\nDTSTART:20231115T090000\nDTEND:20231115T093000\nRELATED-TO:9000\nBEGIN:PARTICIPANT\nPARTICIPANT-TYPE:CONTACT\nUID:1234\nCALENDAR-ADDRESS:mailto:attendee@example.com\nSTRUCTURED-DATA;VALUE=BINARY;ENCODING=BASE64;FMTTYPE=text/vcard:QkVHSU46VkNBUkQNClVJRDoxMjM0DQpGTjpBdHRlbmRlZQ0KQ0FMQURSVVJJOm1haWx0bzphdHRlbmRlZUBleGFtcGxlLmNvbQ0KRU5EOlZDQVJEDQo=\nEND:PARTICIPANT\nEND:VJOURNAL\n</code></pre>"},{"location":"template/groupware/meeting/","title":"iCal4j Template - Groupware: Meeting","text":"<p>Perhaps the most common use of iCalendar is to define and share meeting invites. A Meeting is a closed invitation to select recipients in order for collaborative discussion or other activities. This template may be used to create or modify <code>VEVENT</code> objects to conform with conventional approaches to defining meeting invites.</p>"},{"location":"template/groupware/meeting/#examples","title":"Examples","text":"<p>Assuming we use vCard to represent meeting participants, we can construct a new meeting:</p> <pre><code>VCard organizer = ...\nVCard chair = ...\n\nVEvent meeting = new Meeting().organizer(organizer)\n            .chair(new Contact(chair))\n            .start(LocalDate.of(2023, 11, 13).atStartOfDay())\n            .duration(Duration.ofMinutes(30)).apply();\n</code></pre> <p>The result is something like this:</p> <pre><code>BEGIN:VEVENT\nDTSTAMP:20231113T000000Z\nORGANIZER;CN=Big Boss:mailto:boss@example.com\nDTSTART:20231113T000000\nDURATION:PT30M\nCONCEPT:https://ical4j.org/event-types/MEETING\nATTENDEE;CUTYPE=INDIVIDUAL;ROLE=CHAIR:mailto:lead-by@example.com\nBEGIN:PARTICIPANT\nPARTICIPANT-TYPE:CONTACT\nUID:1234\nCALENDAR-ADDRESS:mailto:lead-by@example.com\nSTRUCTURED-DATA;VALUE=BINARY;ENCODING=BASE64;FMTTYPE=text/vcard:QkVHSU46VkNBUkQNClVJRDoxMjM0DQpGTjpUZWFtIExlYWQNCkNBTEFEUlVSSTptYWlsdG86bGVhZC1ieUBleGFtcGxlLmNvbQ0KRU5EOlZDQVJEDQo=\nEND:PARTICIPANT\nEND:VEVENT\n</code></pre>"},{"location":"template/groupware/note/","title":"iCal4j Template - Groupware: Note","text":"<p>A Note is used to capture useful information such as outcomes of discussions, talking points and anything else not specifically actionable. Notes may be associated with Meetings or Agenda, and can also exist independently.</p>"},{"location":"template/project/","title":"iCal4j Template - Project Management","text":"<p>Project management templates.</p>"},{"location":"template/project/#overview","title":"Overview","text":"<p>Project management focuses on the collaboration between individuals and teams to achieve specific outcomes. A project may represent a time-bounded or unbounded collaboration, and is the focal point for tracking objectives, risk, issues, etc. associated with the collaborative activities.</p>"},{"location":"template/project/decision/","title":"iCal4j Template - Project Management: Decision","text":"<p>A Decision captures agreement on a critical Project element that may be referred to or superseded at a later date. Decisions are Project assumptions that ensure collaborators all agree on Project outcomes and deliverables.</p>"},{"location":"template/project/issue/","title":"iCal4j Template - Project Management: Issue","text":"<p>Issues are challenges and blockers to Project Tasks. Resolution of an Issue may require additional Tasks to be completed first.</p>"},{"location":"template/project/milestone/","title":"iCal4j Template - Project Management: Milestone","text":"<p>A Milestone represents a target within a project that may be associated with a specific Objective. The Milestone defines the WHAT aspect of Project activities and are an opportunity to track progress within a Project.</p>"},{"location":"template/project/objective/","title":"iCal4j Template - Project Management: Objective","text":"<p>An Objective identifies a specific goal of a project, and may be used to group specific risks, issues and milestones. Objectives should be high-level, and focus on the WHY aspects of a Project (i.e. what is the purpose of the project).</p>"},{"location":"template/project/project/","title":"iCal4j Template - Project Management: Project","text":"<p>A Project is represented as collaborative activity associated with one or more teams and/or individuals. Each Project may have associated objectives, risks, issues, etc. that are used to guide collaborative activities.</p>"},{"location":"template/project/risk/","title":"iCal4j Template - Project Management: Risk","text":"<p>A Risk is used to track potential problems or issues associated with a Project. Essentially a Risk is an unrealised issue, which has an associated likelihood and impact to a Project.</p>"},{"location":"template/project/task/","title":"iCal4j Template - Project Management: Task","text":"<p>A Task captures a specific activity undertaken by a team or individual. Each Task may be associated with a Milestone such that progress towards Milestone completion may be accurately tracked.</p>"},{"location":"template/project/timesheet/","title":"iCal4j Template - Project Management: Timesheet","text":"<p>A Timesheet is used to capture metrics related to Project effort. On a given day, week or month it may be useful to track how much time is spent on specific Tasks for purposed such as financial reporting.</p>"},{"location":"template/wiki/","title":"iCal4j Template - Wiki","text":"<p>Templates for maintaining a Wiki.</p>"},{"location":"template/wiki/#overview","title":"Overview","text":"<p>A Wiki is a collection of articles and topics that is collaboratively maintained by a group of individuals. A Wiki is often used as a Knowledge Base to build a collection of explicit knowledge related to a team function or project.</p>"},{"location":"template/wiki/article/","title":"iCal4j Template - Wiki: Article","text":"<p>An Article captures explicit knowledge about something related to the Project or Workspace it is associated with. An Article may be linked to child or parent Articles, and may also be a part of a sequence (i.e. linked to previous and/or next Articles).</p>"},{"location":"template/wiki/definition/","title":"iCal4j Template - Wiki: Definition","text":"<p>A Definition describes a specific concept or term such that it may be referenced directly in Articles. For example, a Definition that is linked to an Article may be used to annotate the text inline when rendered as a web page.</p>"},{"location":"template/wiki/faq/","title":"iCal4j Template - Wiki: Faq","text":"<p>A Faq identifies a gap in the Knowledge Base, or a request for an Article. When an Article is provided to satisfy the Faq it can be linked and marked as answered.</p>"},{"location":"template/wiki/topic/","title":"iCal4j Template - Wiki: Topic","text":"<p>A Topic is used to group related Articles to assist with navigation and discovery of captured knowledge.</p>"},{"location":"template/workflow/","title":"iCal4j Template - Workflow","text":"<p>Workflow-related templates.</p>"},{"location":"template/workflow/#overview","title":"Overview","text":"<p>A workflow may represent a sequence of steps that define a process, often useful for collaborative activities between teams and individuals.</p>"},{"location":"template/workflow/approval/","title":"iCal4j Template - Workflow: Approval","text":"<p>An Approval may be required as part of a workflow in order to review or assess the validity of a Request or Tasks associated with it. An Approval may also be used to trigger the creation of additional Tasks required for service fulfilment.</p>"},{"location":"template/workflow/metric/","title":"iCal4j Template - Workflow: Metric","text":"<p>A Metric captures a measurable outcome of specific objectives. This could refer to elapsed time to complete a task, fulfill and order or service a request.</p>"},{"location":"template/workflow/request/","title":"iCal4j Template - Workflow: Request","text":"<p>A Request represents a demand for service or feature provided by the Workspace. Requests are typically created by teams or individual external to the Workspace, and serviced by those within. There may be one or more Tasks associated in order to fulfill the Request.</p>"},{"location":"template/workflow/roster/","title":"iCal4j Template - Workflow: Roster","text":"<p>A Roster represents the availability of teams or individuals for servicing requests. A Roster may be used to identify who should be notified in the event of a new Request.</p>"},{"location":"vcard/","title":"iCal4j vCard","text":"<p>iCal4j vCard is a Java library that provides support for the vCard specification as defined by draft-ietf-vcarddav-vcardrev-06.</p>"},{"location":"vcard/#minimum-requirements","title":"Minimum requirements","text":"<p>iCal4j vCard requires a minimum of Java 5 due to the use of features introduced in this version. If you need to run on an earlier version of Java, consider using Retroweaver.</p>"},{"location":"vcard/#project-information","title":"Project Information","text":"<ul> <li>Project Home</li> <li>Javadocs</li> </ul>"},{"location":"vcard/#download","title":"Download","text":"<ul> <li>Releases</li> </ul>"},{"location":"vcard/#alternative-vcard-implementations","title":"Alternative vCard implementations","text":"<ul> <li>vCard4j</li> <li>mime-dir-j (inactive)</li> <li>Card Me (inactive)</li> </ul>"},{"location":"vcard/#references","title":"References","text":"<ul> <li>VCardDAV.org</li> </ul>"},{"location":"vcard/examples/","title":"iCal4j vCard - Examples","text":"<p>This page provides examples of using an iCal4j VCard model to generate VCard objects.</p>"},{"location":"vcard/examples/#creating-a-simple-vcard","title":"Creating a simple vCard","text":"<pre><code>List&lt;Property&gt; props = new ArrayList&lt;Property&gt;();\nprops.add(new Source(URI.create(\"ldap://ldap.example.com/cn=Babs%20Jensen,%20o=Babsco,%20c=US\")));\nprops.add(new Name(\"Babs Jensen's Contact Information\"));\nprops.add(Kind.INDIVIDUAL);\n// add a custom property..\nprops.add(new Property(\"test\") {\n    @Override\n    public String getValue() {\n        return null;\n    }\n\n    @Override\n    public void validate() throws ValidationException {\n    }\n});\n\nVCard vcard = new VCard(props);\n</code></pre>"}]}